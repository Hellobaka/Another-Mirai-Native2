@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@using Another_Mirai_Native.Config
@using Another_Mirai_Native.Native

@if (CurrentPlugin != null)
{
    <MudText Typo="Typo.h5">插件信息</MudText>
    <MudText Style="margin-top: 5px;">AppId: @CurrentPlugin.TargetPlugin.AppInfo.AppId</MudText>
    <MudText Style="margin-top: 5px;">作者: @CurrentPlugin.TargetPlugin.AppInfo.author</MudText>
    <MudText Style="margin-top: 5px;">版本: @CurrentPlugin.TargetPlugin.AppInfo.version</MudText>

    <MudText Typo="Typo.h5" Style="margin-top: 15px;">插件描述</MudText>
    <MudText Style="margin-top: 5px;">@CurrentPlugin.TargetPlugin.AppInfo.description</MudText>

    <MudText Typo="Typo.h5" Style="margin-top: 15px;">插件权限</MudText>
    <MudList T="string" Dense="true">
        @foreach (var item in CurrentPlugin.TargetPlugin.AppInfo.auth)
        {
            <MudListItem>@AuthChineseName[item]</MudListItem>
        }
    </MudList>

    <div style="margin: 10px 0;display: flex;justify-content: flex-start;align-content: center;align-items: center;">
        <MudButton Color="Color.Primary" @onclick="ToggleEnableClick">
            @if (ToggleEnableRunningStatus)
            {
                <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
            }
            @((SelectedPlugin?.Enabled ?? false) ? "禁用" : "启用")
        </MudButton>
        <MudButton Color="Color.Secondary" @onclick="TestClick">测试</MudButton>
        <MudButton Color="Color.Info" @onclick="ReloadClick">
            @if (ToggleEnableRunningStatus)
            {
                <MudProgressCircular Color="Color.Info" Size="Size.Small" Indeterminate="true" />
            }
            重载
        </MudButton>
    </div>
}
else
{
    <MudText Align="Align.Center" Style="margin: 100px;">从左侧点击一个插件以浏览信息</MudText>
}

@code {
    [Parameter]
    public CQPluginProxyWrapper? CurrentPlugin { get; set; }

    private Dictionary<int, string> AuthChineseName { get; set; } = new() {
        {20, "[敏感]取Cookies"},
        {30, "接收语音"},
        {101, "发送群消息"},
        {103, "发送讨论组消息"},
        {106, "发送私聊消息"},
        {110, "[敏感]发送赞"},
        {120, "置群员移除"},
        {121, "置群员禁言"},
        {122, "置群管理员"},
        {123, "置全群禁言"},
        {124, "置匿名群员禁言"},
        {125, "置群匿名设置"},
        {126, "置群成员名片"},
        {127, "[敏感]置群退出"},
        {128, "置群成员专属头衔"},
        {130, "取群成员信息"},
        {131, "取陌生人信息"},
        {132, "取群信息"},
        {140, "置讨论组退出"},
        {150, "置好友添加请求"},
        {151, "置群添加请求"},
        {160, "取群成员列表"},
        {161, "取群列表"},
        {162, "取好友列表"},
        {180, "撤回消息"},
        };
    private CQPluginProxy? SelectedPlugin => CurrentPlugin?.TargetPlugin;
    private bool ToggleEnableRunningStatus { get; set; }
    private bool ReloadRunningStatus { get; set; }

    private async void ReloadClick()
    {
        if (SelectedPlugin == null)
        {
            return;
        }
        bool? result = await DialogService.ShowMessageBox("重载插件", $"确定要重载 {SelectedPlugin.PluginName} 吗？", "嗯", cancelText: "不是", options: new DialogOptions { FullWidth = true });
        if (result == null || !result.Value)
        {
            return;
        }
        if (SelectedPlugin.Enabled == false)
        {
            await DialogService.ShowMessageBox("嗯？", $"{SelectedPlugin.PluginName} 处于禁用状态，无法重启");
            return;
        }
        ReloadRunningStatus = true;
        await Task.Run(() =>
        {
            PluginManagerProxy.Instance.ReloadPlugin(SelectedPlugin);
            ReloadRunningStatus = false;
        });
        await InvokeAsync(() => StateHasChanged());
    }

    private async void TestClick()
    {
        if (SelectedPlugin == null)
        {
            return;
        }

        if (SelectedPlugin.AppInfo.AuthCode != AppConfig.Instance.TestingAuthCode && !(await DialogService.ShowMessageBox("测试插件", $"确定要测试 {SelectedPlugin.PluginName} 吗？此操作会导致插件无法接收事件", "嗯", cancelText: "不是", options: new DialogOptions { FullWidth = true }) ?? false))
        {
            return;
        }
        if (SelectedPlugin.AppInfo.AuthCode != AppConfig.Instance.TestingAuthCode)
        {
            AppConfig.Instance.TestingAuthCode = SelectedPlugin.AppInfo.AuthCode;
            NavigationManager.NavigateTo("/test");
        }
        else
        {
            AppConfig.Instance.TestingAuthCode = 0;
            await DialogService.ShowMessageBox("测试已停止", "", options: new DialogOptions { FullWidth = true });
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private async void ToggleEnableClick()
    {
        if (CurrentPlugin == null || SelectedPlugin == null)
        {
            return;
        }
        bool? r = await DialogService.ShowMessageBox("结束进程", $"确认要{(SelectedPlugin.Enabled ? "禁用" : "启用")}插件 {SelectedPlugin.PluginName} 吗？", "嗯", cancelText: "不是", options: new DialogOptions { FullWidth = true });
        if (r == null || !r.Value)
        {
            return;
        }

        ToggleEnableRunningStatus = true;
        bool toggleSuccess = true;
        await Task.Run(() =>
        {
            bool success = PluginManagerProxy.Instance.SetPluginEnabled(SelectedPlugin, !SelectedPlugin.Enabled);
            if (!success)
            {
                ToggleEnableRunningStatus = false;
                toggleSuccess = false;
                return;
            }
            if (SelectedPlugin.Enabled)
            {
                AppConfig.Instance.AutoEnablePlugin.Add(SelectedPlugin.PluginName);
            }
            else
            {
                AppConfig.Instance.AutoEnablePlugin.Remove(SelectedPlugin.PluginName);
            }
            AppConfig.Instance.AutoEnablePlugin = AppConfig.Instance.AutoEnablePlugin.Distinct().ToList();
            AppConfig.Instance.SetConfig("AutoEnablePlugins", AppConfig.Instance.AutoEnablePlugin);
            ToggleEnableRunningStatus = false;
        });
        if (!toggleSuccess)
        {
            await DialogService.ShowMessageBox("哎呀", "切换插件状态失败了", options: new DialogOptions { FullWidth = true });
        }
        await InvokeAsync(() => StateHasChanged());
    }
}
