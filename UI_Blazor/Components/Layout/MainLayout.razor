@inherits LayoutComponentBase
@inject AuthService _authProvider
@inject ISnackbar Snackbar
@inject Shared Shared
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@implements IDisposable

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" @ref="@_mudThemeProvider" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">AMN2 Blazor-WebUI</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.BrightnessMedium" @onclick="ToggleTheme" />
        <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.ExitToApp" @onclick="Logout" />
    </MudAppBar>
    <MudDrawer Variant="@DrawerVariant.Mini" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />            
        <MudSpacer></MudSpacer>
        <MudNavMenu Bordered="true" Color="Color.Primary" Rounded="false">
            <MudNavLink Href="setting" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Settings">@(_drawerOpen ? "设置" : "")</MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent Class="">
        <AuthorizeView>
            <Authorized>
                @Body
            </Authorized>
            <NotAuthorized>
                <Another_Mirai_Native.BlazorUI.Components.Pages.Login />
            </NotAuthorized>
        </AuthorizeView>
    </MudMainContent>
</MudLayout>

@code {
    public static bool _drawerOpen = false;
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider;

    protected override void OnInitialized()
    {
        AuthService.OnAuthChanged -= AuthService_OnAuthChanged;
        AuthService.OnAuthChanged += AuthService_OnAuthChanged;
        LogHandler.OnErrorLogReceived -= OnErrorLogReceived;
        LogHandler.OnErrorLogReceived += OnErrorLogReceived;
            BlazorUI.Entry_Blazor.OnBlazorServiceStopped -= OnBlazorStopped;
            BlazorUI.Entry_Blazor.OnBlazorServiceStopped += OnBlazorStopped;
    }

    private void OnBlazorStopped()
    {
        Dispose();
    }

    public void Dispose()
    {
        AuthService.OnAuthChanged -= AuthService_OnAuthChanged;
            BlazorUI.Entry_Blazor.OnBlazorServiceStopped -= OnBlazorStopped;
        LogHandler.OnErrorLogReceived -= OnErrorLogReceived;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Shared.IsDarkMode)
            {
                _isDarkMode = Shared.IsDarkMode;
            }
            else
            {
                await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);                
            }
        }

        // if (firstRender)
        // {
        //     var info = await _authProvider.GetAuthenticationStateAsync();
        //     if ((info == null || !(info?.User?.Identity?.IsAuthenticated ?? false)) && NavigationManager.ToBaseRelativePath(NavigationManager.Uri) != "/")
        //     {
        //         NavigationManager.NavigateTo("/");
        //     }
        // }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = await _mudThemeProvider.GetSystemPreference();
    }

    private void AuthService_OnAuthChanged(string sessionId)
    {
        if (sessionId != _authProvider.SessionId)
        {
            Snackbar.Add("令牌过期，登出", Severity.Warning);
            InvokeAsync(() =>
            {
                NavigationManager.NavigateTo("/");
            });
        }
    }

    private void OnErrorLogReceived(LogModel log)
    {
        Snackbar.Add(log.detail, log.priority == (int)Model.Enums.LogLevel.Warning ? Severity.Warning : Severity.Error);
    }

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async void Logout()
    {
        bool? result = await DialogService.ShowMessageBox("嗯？", "要登出了吗？", "嗯", cancelText: "不是", options: new DialogOptions { FullWidth = true });
        if (result != null && result.Value)
        {
            await _authProvider.UpdateSignInStatusAsync(null);
            NavigationManager.NavigateTo("/");
        }
    }

    private void ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
    }
}