@page "/logs"
@using System.Collections.Specialized
@using System.Collections.ObjectModel
@using LogLevel = Another_Mirai_Native.Model.Enums.LogLevel
@inject Shared Shared
@inject IScrollManager ScrollManager
@inject IScrollListenerFactory ScrollListenerFactory
@inject NavigationManager NavigationManager
@implements IDisposable

<MudDataGrid T="LogDisplay" @ref="DataGrid" ServerData="ReloadData" Dense="true" FixedHeader="true" Virtualize="true" id="logContainer" SortMode="SortMode.None">
    <ToolBarContent>
        <div style="display: flex; align-items: center;">
            <MudSelect Margin="Margin.Dense" Variant="Variant.Outlined" Label="日志等级" T="int" @bind-Value="SelectedLogLevel" TextChanged="SelectLogLevelChanged">
                <MudSelectItem T="int" Value="@(0)">Debug 调试</MudSelectItem>
                <MudSelectItem T="int" Value="@(10)">Info 信息</MudSelectItem>
                <MudSelectItem T="int" Value="@(20)">Warning 警告</MudSelectItem>
                <MudSelectItem T="int" Value="@(30)">Error 错误</MudSelectItem>
                <MudSelectItem T="int" Value="@(40)">Fatal 致命</MudSelectItem>
            </MudSelect>
            <MudSwitch id="autoScroll" @bind-Value="@AutoScroll" Color="Color.Primary" T="bool" Style="margin: 5px 0;" CheckedChanged="AutoScrollChecked" Label="自动滚动"></MudSwitch>
            <MudSpacer />
            <MudTooltip Text="滚动至底">
                <MudIconButton Icon="@Icons.Material.Filled.VerticalAlignBottom" Color="Color.Secondary" OnClick="@(() => ScrollToBottom())"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="筛选">
                <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" Color="Color.Primary" OnClick="@(() => ShowMoreFilter = !ShowMoreFilter)"></MudIconButton>
            </MudTooltip>
        </div>
        <MudCollapse Expanded="ShowMoreFilter">
            <MudTextField @bind-Value="LogSearchText" Margin="Margin.Dense" Immediate Label="搜点什么？" TextChanged="SearchTextChanged" Variant="Variant.Outlined"></MudTextField>
            <div style="display: flex; align-items: center;">
                <MudDateRangePicker PickerOpened="@(() => FilterDateRange_Backup = FilterDateRange)" StartMonth="@DateTime.Now.AddMonths(-1)" AutoClose="false" TitleDateFormat="yyyy/MM/dd" @ref="DateRangePicker" PickerVariant="PickerVariant.Dialog" Variant="Variant.Outlined" Margin="Margin.Dense" Label="筛选日期" @bind-DateRange="@FilterDateRange_Backup" PlaceholderStart="开始日期" PlaceholderEnd="结束日期">
                    <PickerActions>
                        <MudButton Class="mr-auto align-self-start" Color="Color.Error" OnClick="@(async () => await DateRangePicker.ClearAsync())">重置</MudButton>
                        <MudButton Class="mr-auto align-self-start" Color="Color.Success" OnClick="@(() => {DateTime dateTime = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1); DateRangePicker.PickerMonth = dateTime.AddMonths(-1);})">今天</MudButton>
                        <MudButton Color="Color.Warning" OnClick="@(() => FilterDateRange_Backup = new DateRange(DateTime.Now.AddDays(-1), DateTime.Now))">天</MudButton>
                        <MudButton Color="Color.Warning" OnClick="@(() => FilterDateRange_Backup = new DateRange(DateTime.Now.AddDays(-7), DateTime.Now))">周</MudButton>
                        <MudButton Color="Color.Warning" OnClick="@(() => FilterDateRange_Backup = new DateRange(DateTime.Now.AddMonths(-1), DateTime.Now))">月</MudButton>
                        <MudButton Color="Color.Secondary" OnClick="@(async() => { FilterDateRange_Backup = FilterDateRange; await DateRangePicker.CloseAsync(false); })">取消</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(async() => { await DateRangePicker.CloseAsync(); FilterDateRange = FilterDateRange_Backup; await ReloadLogs(); })">确认</MudButton>
                    </PickerActions>
                </MudDateRangePicker>
            </div>
        </MudCollapse>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Time" Title="时间" CellClassFunc="@_cellClassFunc" />
        <PropertyColumn Property="x => x.Source" Title="插件" CellClassFunc="@_cellClassFunc" />
        <PropertyColumn Property="x => x.Name" Title="来源" CellClassFunc="@_cellClassFunc" />
        <PropertyColumn Property="x => x.Detail" HeaderStyle="width: 50%;" Title="消息" CellClassFunc="@_cellClassFunc" />
        <PropertyColumn Property="x => x.Status" Title="结果" CellClassFunc="@_cellClassFunc" />
    </Columns>
    <PagerContent>
        <MudDataGridPager RowsPerPageString="每页数量" InfoFormat="{first_item} ~ {last_item} 共 {all_items} 条" PageSizeOptions="@([50,100,500])" T="LogDisplay" />
    </PagerContent>
</MudDataGrid>
<MudOverlay @bind-Visible="Loading" DarkBackground="true" AutoClose="false">
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
</MudOverlay>        
<MudFab Style="position: fixed; right: 10px; bottom: 30px;" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" OnClick="ScrollToTop" />

<style>
    .mud-toolbar.mud-toolbar-gutters.mud-table-toolbar {
    z-index: 10;
    top: var(--mud-appbar-height);
    background-color: var(--mud-palette-surface);
    display: block;
    height: auto;
    position: sticky;
    }
    .mud-table-container {
    height: calc(94vh - var(--mud-appbar-height) - 78px);
    }
</style>

@code {
    private MudTheme Theme = new MudTheme();
    public ObservableCollection<LogDisplay> DisplayLogs { get; set; } = new();
    public bool Loading { get; set; } = true;
    public bool AutoScroll { get; set; } = true;
    public bool ShowMoreFilter { get; set; } = false;
    private int SelectedLogLevel { get; set; } = 10;
    private string LogSearchText { get; set; } = "";
    private DateRange FilterDateRange { get; set; }
    private DateRange FilterDateRange_Backup { get; set; }
    private MudDateRangePicker DateRangePicker{ get; set; }
    private MudSelect<int> LogCountSelector { get; set; }
    private Debouncer SearchDebounder { get; set; } = new();
    private bool Loaded { get; set; }
    private MudDataGrid<LogDisplay>? DataGrid { get; set; } = null;

    private int TotalItem { get; set; } = 1;

    protected override void OnInitialized()
    {
        AutoScroll = Shared.AutoScroll;
        LogHandler.Logs.CollectionChanged += OnLogHandlerLogChanged;
        LogHelper.LogStatusUpdated += OnLogStatusUpdated;
        BlazorUI.Entry_Blazor.OnBlazorServiceStopped += OnBlazorStopped;
        Loading = false;
    }

    public void Dispose()
    {
        LogHandler.Logs.CollectionChanged -= OnLogHandlerLogChanged;
        LogHelper.LogStatusUpdated -= OnLogStatusUpdated;
        BlazorUI.Entry_Blazor.OnBlazorServiceStopped -= OnBlazorStopped;
    }

    private void OnBlazorStopped()
    {
        Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ReloadLogs();
            Loaded = true;
            DelayScrollToBottom(50);
        }
    }

    private void OnLogStatusUpdated(int logId, string status)
    {
        var item = DisplayLogs.FirstOrDefault(x=>x.Id == logId);
        if (item != null)
        {
            item.Status = status;
            InvokeAsync(() => StateHasChanged());
        }
    }

    private async void OnLogHandlerLogChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if(e.Action != NotifyCollectionChangedAction.Add
            || e.NewItems == null)
        {
            return;
        }

        foreach(LogModel item in e.NewItems)
        {
            if (item.priority >= SelectedLogLevel 
                    && item.status.Contains(LogSearchText) && item.detail.Contains(LogSearchText)
                    && item.source.Contains(LogSearchText) && item.name.Contains(LogSearchText))
            {
                if (ShowMoreFilter && FilterDateRange != null 
                    && FilterDateRange.Start != null && FilterDateRange.End != null)
                {
                    var startTime = new DateTime(FilterDateRange.Start.Value.Year, FilterDateRange.Start.Value.Month, FilterDateRange.Start.Value.Day).AddDays(-1);
                    var endTime = new DateTime(FilterDateRange.End.Value.Year, FilterDateRange.End.Value.Month, FilterDateRange.End.Value.Day).AddDays(1);
                    long startTimestamp = Helper.DateTime2TimeStamp(startTime);
                    long endTimestamp = Helper.DateTime2TimeStamp(endTime);

                    if (item.time < startTimestamp || item.time > endTimestamp)
                    {
                        break;
                    }
                }
                DisplayLogs.Add(LogDisplay.ParseLogModel(item));
            }
            TotalItem++;
        }
        await InvokeAsync(() => StateHasChanged());
        DelayScrollToBottom(50);
    }

    private Func<LogDisplay, string> _cellClassFunc => (x) =>
    {
        if (x == null)
        {
            return "";
        }
        string itemClass = (LogLevel)x.Priority switch
        {
            LogLevel.Debug => "",
            LogLevel.Error => "mud-error-text",
            LogLevel.Info => "",
            LogLevel.Fatal => "mud-error-text",
            LogLevel.InfoSuccess => "mud-primary-text",
            LogLevel.InfoSend => "mud-success-text",
            LogLevel.InfoReceive => "mud-info-text",
            LogLevel.Warning => "mud-warning-text",
            _ => "",
        };
        return itemClass;
    };

    private async Task AutoScrollChecked(bool a)
    {
        Shared.AutoScroll = AutoScroll;
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        if (Loaded && AutoScroll && NavigationManager.ToBaseRelativePath(NavigationManager.Uri).StartsWith("logs"))
        {
            await ScrollManager.ScrollToBottomAsync(".mud-table-container", ScrollBehavior.Smooth);
        }
    }

    private async Task ScrollToTop()
    {
        await ScrollManager.ScrollToTopAsync(".mud-table-container", ScrollBehavior.Smooth);
    }

    private async Task SelectLogLevelChanged(string logLevel)
    {
        if (!Loaded)
        {
            return;
        }
        await ReloadLogs();
    }

    private void SearchTextChanged(string search)
    {
        if (!Loaded)
        {
            return;
        }
        SearchDebounder.Debounce(() => ReloadLogs(), 500);
    }

    private async Task ReloadLogs()
    {
        if (DataGrid == null)
        {
            return;
        }
        await InvokeAsync(async () => await DataGrid.ReloadServerData());
    }

    private async Task<GridData<LogDisplay>> ReloadData(GridState<LogDisplay> state)
    {
        List<LogModel> logs = [];
        DateTime? start = null;
        DateTime? end = null;
        await Task.Run(() =>
        {
            if (ShowMoreFilter && FilterDateRange != null
                    && FilterDateRange.Start != null && FilterDateRange.End != null)
            {
                start = FilterDateRange.Start;
                end = FilterDateRange.End;
            }
            logs = LogHelper.DetailQueryLogs(SelectedLogLevel, state.Page + 1, state.PageSize, LogSearchText, out int totalItem, out int totalPage, start, end);
            TotalItem = totalItem;

            DisplayLogs.Clear();
            foreach (var item in logs)
            {
                DisplayLogs.Add(LogDisplay.ParseLogModel(item));
            }
        });

        return new GridData<LogDisplay>
        {
            TotalItems = TotalItem,
            Items = DisplayLogs
        };
    }

    private void DelayScrollToBottom(int delay)
    {
        Task.Run(async () =>
        {
            await Task.Delay(delay);
            await InvokeAsync(() => ScrollToBottom());
        });
    }
}
