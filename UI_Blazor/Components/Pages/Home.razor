@page "/dashboard"
@using Another_Mirai_Native.BlazorUI.Components.Layout
@using static Another_Mirai_Native.BlazorUI.Entry_Blazor
@using System.Timers
@using System.Management
@using System.Net
@using System.Net.Sockets
@using System.Diagnostics
@using Another_Mirai_Native.Config
@using Another_Mirai_Native.Native
@using Microsoft.Win32
@using System.Runtime.InteropServices
@inject IJSRuntime JS
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable

<MudGrid Style="padding: 16px;">
    <MudItem md="4" sm="12">
        <MudPaper Style="padding: 16px;">
            <h2>系统信息</h2>
            <div style="display: flex; margin-top: 10px">
                <MudIcon Icon="@Icons.Custom.Brands.MicrosoftWindows"></MudIcon>
                <MudText>系统版本：</MudText>
                <MudSpacer />
                <MudText Style="text-align: right">@OSVersion</MudText>
            </div>
            <div style="display: flex; margin-top: 5px">
                <MudIcon Icon="@Icons.Material.Filled.Apps"></MudIcon>
                <MudText>CPU：</MudText>
                <MudSpacer />
                <MudText Style="text-align: right">@CPUInfo</MudText>
            </div>
            <div style="display: flex; margin-top: 5px">
                <MudIcon Icon="@Icons.Material.Filled.Memory"></MudIcon>
                <MudText>总物理内存：</MudText>
                <MudSpacer />
                <MudText Style="text-align: right">@TotalMemory MB</MudText>
            </div>
            <div style="display: flex; margin-top: 5px">
                <MudIcon Icon="@Icons.Material.Filled.MoreTime"></MudIcon>
                <MudText>框架启动：</MudText>
                <MudSpacer />
                <MudText Style="text-align: right">@StartedTime</MudText>
            </div>
            <div style="display: flex; margin-top: 5px">
                <MudIcon Icon="@Icons.Material.Filled.Api"></MudIcon>
                <MudText>框架版本：</MudText>
                <MudSpacer />
                <MudText Style="text-align: right">@(AppConfig.Instance.GetType().Assembly.GetName().Version)</MudText>
            </div>
        </MudPaper>

        <MudPaper Style="margin-top: 10px; padding: 16px; display: flex; justify-content: space-between; align-items: center;">
            <div style="width: 45%; position: relative; display: flex; flex-direction: column; align-items: center; max-width: 400px; max-height: 420px;">
                <h2>CPU</h2>
                <div style="width: 100%; height: 0; padding-bottom: 100%; position: relative;">
                    <MudProgressCircular StrokeWidth="1" Class="cpuContainer" Color="Color.Primary" Style="max-width: 400px; max-height: 400px; position: absolute; top: 0; left: 0; width: 100%; height: 100%;" Value="CPUUsage" />
                    <div id="cpuInfo" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;">
                        <MudText>@(CPUUsage.ToString("f2"))%</MudText>
                        <MudText>@((CPUCurrentFrequency / 1000.0).ToString("f2")) GHz</MudText>
                    </div>
                </div>
            </div>
            <div style="width: 45%; position: relative; display: flex; flex-direction: column; align-items: center; max-width: 400px; max-height: 420px;">
                <h2>内存</h2>
                <div style="width: 100%; height: 0; padding-bottom: 100%; position: relative;">
                    <MudProgressCircular StrokeWidth="1" Class="memoryContainer" Color="Color.Primary" Style="max-width: 400px; max-height: 400px; position: absolute; top: 0; left: 0; width: 100%; height: 100%;" Value="MemoryUsage" />
                    <div id="memoryInfo" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); text-align: center;">
                        <MudText>@(MemoryUsage.ToString("f2"))%</MudText>
                        <MudText>@((UsedMemory / 1024.0).ToString("f2")) / @((TotalMemory / 1024.0).ToString("f2")) GB</MudText>
                    </div>
                </div>
            </div>
        </MudPaper>
    </MudItem>
    <MudItem md="8" sm="12">
        <MudPaper>
            <MudDataGrid Items="@ProcessList" Dense>
                <ToolBarContent>
                    <MudText Typo="Typo.h6">
                        @(ProcessList.Count - 1) 个插件 内存 @(TotalProcessMemory.ToString("f2")) MB CPU @(TotalProcessCPU.ToString("f2"))%
                    </MudText>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.PID" Title="PID" />
                    <PropertyColumn Property="x => x.PluginName" Title="名称" />
                    <PropertyColumn Property="x => x.Running" Title="运行状态" />
                    <PropertyColumn Property="x => x.CPUUsage" Format="f2" Title="CPU使用率(%)" />
                    <PropertyColumn Property="x => x.MemoryUsage" Format="f2" Title="内存占用(MB)" />
                    <TemplateColumn CellClass="d-flex justify-end">
                        <CellTemplate>
                            <MudTooltip Text="结束进程">
                                <MudIconButton Color="Color.Secondary" Disabled="@(context.Item.PluginName == "主框架")" Icon="@Icons.Material.Filled.Close" OnClick="() => KillPluginProcess(context.Item)"></MudIconButton>
                            </MudTooltip>
                            <MudTooltip Text="重载">
                                <MudIconButton Color="Color.Primary" Disabled="@(context.Item.PluginName == "主框架")" Icon="@Icons.Material.Filled.Refresh" OnClick="() => ReloadPlugin(context.Item)"></MudIconButton>
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudPaper>
    </MudItem>
</MudGrid>
<MudOverlay @bind-Visible="Loading" DarkBackground="true" AutoClose="false">
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
</MudOverlay>

<script>
    function move() {
        const cpuInfo = document.getElementById('cpuInfo');
        const memoryInfo = document.getElementById('memoryInfo');
        const cpuContainer = document.querySelector('.cpuContainer');
        const memoryContainer = document.querySelector('.memoryContainer');

        if (cpuContainer && cpuInfo) {
            cpuContainer.appendChild(cpuInfo);
        }

        if (memoryContainer && memoryInfo) {
            memoryContainer.appendChild(memoryInfo);
        }
    };
</script>

@code {
    public bool Loading { get; set; } = true;

    private string OSVersion { get; set; }
    private string CPUName { get; set; }
    private string CPUInfo { get; set; }
    private string LocalIPAddress { get; set; }
    private float CPUBaseFrequency { get; set; }
    private double CPUFrequencyRatio { get; set; }
    private ulong TotalMemory { get; set; }

    private ulong UsedMemory { get; set; }
    private double MemoryUsage { get; set; }
    private double CPUCurrentFrequency { get; set; }
    private float CPUUsage { get; set; }
    private string StartedTime { get; set; } = "00:00:00:00";
    private double TotalProcessMemory { get; set; }
    private double TotalProcessCPU { get; set; }
    private double SelfProcessMemory { get; set; }
    private double SelfProcessCPU { get; set; }
    private List<DashBoardProcessItem> ProcessList { get; set; } = [];
    private Dictionary<int, (DateTime, TimeSpan)> ProcessCPUUsageDict { get; set; } = [];

    private Timer UsageTimer { get; set; }
    private PerformanceCounter CPUUsageCounter { get; set; }
    private PerformanceCounter CPUFrequencyCounter { get; set; }
    private PerformanceCounter CPUBaseFrequencyCounter { get; set; }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("move");
            CollectBaseInfo();
            StartUsageTimer();
            Loading = false;

            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        LogHandler.StartSaveLogs();
            BlazorUI.Entry_Blazor.OnBlazorServiceStopped -= OnBlazorStopped;
            BlazorUI.Entry_Blazor.OnBlazorServiceStopped += OnBlazorStopped;
    }

    public void Dispose()
    {
        StopUsageTimer();
    }

    private void OnBlazorStopped()
    {
        Dispose();
    }

    private void CollectBaseInfo()
    {
        OSVersion = GetDetailedOSVersion();
        CPUName = GetCpuName();
        CPUBaseFrequency = GetCpuFrequency();
        TotalMemory = GetTotalPhysicalMemory();
        LocalIPAddress = GetLocalIPAddress();
        CPUUsageCounter = new PerformanceCounter("Processor Information", "% Processor Utility", "_Total");
        CPUBaseFrequencyCounter = new PerformanceCounter("Processor Information", "Processor Frequency", "_Total");
        CPUFrequencyCounter = new PerformanceCounter("Processor Information", "% Processor Performance", "_Total");

        CPUUsageCounter.NextValue();
        CPUFrequencyCounter.NextValue();
        CPUBaseFrequencyCounter.NextValue();

        CPUInfo = $"{CPUName} @ {CPUBaseFrequency / 1000.0:f2} GHz";
    }

    private void StartUsageTimer()
    {
        if (UsageTimer != null)
        {
            StopUsageTimer();
        }
        UsageTimer = new Timer
        {
            Interval = 1000
        };
        UsageTimer.Elapsed += UsageTimer_Ticked;
        UsageTimer.Enabled = true;
    }

    private void StopUsageTimer()
    {
        if (UsageTimer == null)
        {
            return;
        }
        UsageTimer.Enabled = false;
        UsageTimer.Stop();
    }

    private async void UsageTimer_Ticked(object? sender, ElapsedEventArgs e)
    {
        CPUFrequencyRatio = CPUFrequencyCounter.NextValue() / 100.0;
        CPUUsage = CPUUsageCounter.NextValue();
        UsedMemory = GetUsedMemory();

        CPUCurrentFrequency = GetCpuCurrentFrequency() * CPUFrequencyRatio;
        MemoryUsage = (UsedMemory / (TotalMemory * 1.0)) * 100.0;
        var span = (DateTime.Now - AppConfig.Instance.StartTime);
        StartedTime = $"{(int)span.TotalDays:00}:{span.Hours:00}:{span.Minutes:00}:{span.Seconds:00}";

        ProcessList.Clear();
        foreach (var item in PluginManagerProxy.Proxies.Where(x => x.PluginProcess != null && !x.PluginProcess.HasExited))
        {
            item.PluginProcess.Refresh();

            double cpu = UpdateOrAddCpuUsagetoDict(item.PluginProcess);

            try
            {
                var processItem = new DashBoardProcessItem()
                {
                    PID = item.PluginProcess.Id,
                    MemoryUsage = item.PluginProcess.PrivateMemorySize64 / 1024.0 / 1024,
                    PluginName = item.PluginName,
                    Running = !item.PluginProcess.HasExited,
                    CPUUsage = cpu
                };
                ProcessList.Add(processItem);
            }
            catch
            { }
        }

        foreach (var item in Process.GetProcessesByName("Another-Mirai-Native"))
        {
            if (ProcessList.Any(x => x.PID == item.Id))
            {
                continue;
            }
            double cpu = UpdateOrAddCpuUsagetoDict(item);
            ProcessList.Add(new DashBoardProcessItem
            {
                PID = item.Id,
                MemoryUsage = item.PrivateMemorySize64 / 1024.0 / 1024,
                PluginName = GetPluginNameFromArg(item.Id),
                Running = !item.HasExited,
                CPUUsage = cpu
            });
        }

        var selfProcess = Process.GetCurrentProcess();
        var selfProcessItem = new DashBoardProcessItem()
        {
            PID = selfProcess.Id,
            MemoryUsage = selfProcess.PrivateMemorySize64 / 1024.0 / 1024,
            PluginName = "主框架",
            Running = !selfProcess.HasExited,
            CPUUsage = UpdateOrAddCpuUsagetoDict(selfProcess)
        };
        ProcessList.Add(selfProcessItem);
        ProcessList = ProcessList.OrderByDescending(x => x.MemoryUsage).ToList();

        TotalProcessMemory = ProcessList.Sum(x => x.MemoryUsage);
        TotalProcessCPU = ProcessList.Sum(x => x.CPUUsage);

        await InvokeAsync(() => StateHasChanged());
    }

    private string GetPluginNameFromArg(int pid)
    {
        string query = $"SELECT CommandLine FROM Win32_Process WHERE ProcessId = {pid}";
        using ManagementObjectSearcher searcher = new ManagementObjectSearcher(query);
        string? commandLine = searcher.Get().Cast<ManagementBaseObject>().FirstOrDefault()?["CommandLine"].ToString();

        string[]? args = commandLine?.ToString().Split(' ');
        if (args == null)
        {
            return "未识别插件";
        }
        for (int i = 0; i < args.Length; i ++)
        {
            if (args[i] == "-Path")
            {
                return Path.GetFileName(args[i + 1]).Replace("\"", "");
            }
        }
        return "未识别插件";
    }

    private string GetDetailedOSVersion()
    {
        string osName = "Unknown OS";
        string version = "Unknown Version";
        string edition = "Unknown Edition";

        using (var searcher = new ManagementObjectSearcher("SELECT Caption, Version, OSArchitecture FROM Win32_OperatingSystem"))
        {
            foreach (var os in searcher.Get())
            {
                osName = os["Caption"]?.ToString() ?? osName;
                version = os["Version"]?.ToString() ?? version;
                edition = os["OSArchitecture"]?.ToString() ?? edition;
            }
        }
        string? releaseId = Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion", "DisplayVersion", "")?.ToString();
        if (!string.IsNullOrEmpty(releaseId))
        {
            version = releaseId;
        }
        return $"{osName} {edition} 版本 {version}";
    }

    private static string GetCpuName()
    {
        using var searcher = new ManagementObjectSearcher("select Name from Win32_Processor");
        var cpuName = searcher.Get().Cast<ManagementBaseObject>().FirstOrDefault()?["Name"];
        return cpuName?.ToString() ?? "Unknown";
    }

    private uint GetCpuFrequency()
    {
        using var searcher = new ManagementObjectSearcher("select MaxClockSpeed from Win32_Processor");
        var maxClockSpeed = searcher.Get().Cast<ManagementBaseObject>().FirstOrDefault()?["MaxClockSpeed"];
        return (uint)(maxClockSpeed ?? 0);
    }

    private uint GetCpuCurrentFrequency()
    {
        using var searcher = new ManagementObjectSearcher("select CurrentClockSpeed from Win32_Processor");
        var currentClockSpeed = searcher.Get().Cast<ManagementBaseObject>().FirstOrDefault()?["CurrentClockSpeed"];
        return (uint)(currentClockSpeed ?? 0);
    }

    private ulong GetTotalPhysicalMemory()
    {
        using var searcher = new ManagementObjectSearcher("select TotalVisibleMemorySize from Win32_OperatingSystem");
        var totalMemory = searcher.Get().Cast<ManagementBaseObject>().FirstOrDefault()?["TotalVisibleMemorySize"];
        return (ulong)(totalMemory ?? 0) / 1024;
    }

    private string GetLocalIPAddress()
    {
        var host = Dns.GetHostEntry(Dns.GetHostName());
        var ip = host.AddressList.FirstOrDefault(a => a.AddressFamily == AddressFamily.InterNetwork);
        return ip?.ToString() ?? "No network adapters with an IPv4 address in the system!";
    }

    private ulong GetUsedMemory()
    {
        using var searcher = new ManagementObjectSearcher("select FreePhysicalMemory from Win32_OperatingSystem");
        var freeMemory = searcher.Get().Cast<ManagementBaseObject>().FirstOrDefault()?["FreePhysicalMemory"];
        ulong freeMemoryMB = (ulong)(freeMemory ?? 0) / 1024;
        return TotalMemory - freeMemoryMB;
    }

    [DllImport("kernel32.dll", SetLastError = true)]
    private static extern bool GetSystemTimes(out FILETIME lpIdleTime, out FILETIME lpKernelTime, out FILETIME lpUserTime);

    [StructLayout(LayoutKind.Sequential)]
    private struct FILETIME
    {
        public uint dwLowDateTime;
        public uint dwHighDateTime;
    }

    private TimeSpan GetCpuUsage(Process process)
    {
        FILETIME ftIdle, ftKernel, ftUser;
        GetSystemTimes(out ftIdle, out ftKernel, out ftUser);

        var cpuTime = process.TotalProcessorTime;
        return cpuTime;
    }

    private double UpdateOrAddCpuUsagetoDict(Process process)
    {
        double cpu = 0;
        if (ProcessCPUUsageDict.TryGetValue(process.Id, out (DateTime, TimeSpan) usage))
        {
            var endCpuUsage = GetCpuUsage(process);
            var endTime = DateTime.UtcNow;

            ProcessCPUUsageDict[process.Id] = (endTime, endCpuUsage);

            // 计算 CPU 使用率
            var cpuUsedMs = (endCpuUsage - usage.Item2).TotalMilliseconds;
            var totalMsPassed = (endTime - usage.Item1).TotalMilliseconds;
            cpu = cpuUsedMs / (Environment.ProcessorCount * totalMsPassed) * 100;
        }
        else
        {
            var startCpuUsage = GetCpuUsage(process);
            var startTime = DateTime.UtcNow;

            ProcessCPUUsageDict[process.Id] = (startTime, startCpuUsage);
        }

        return cpu;
    }

    private async void KillPluginProcess(DashBoardProcessItem item)
    {
        var plugin = PluginManagerProxy.Proxies.FirstOrDefault(x => x.PluginProcess?.Id == item.PID);
        if (plugin == null)
        {
            bool? r = await DialogService.ShowMessageBox("结束进程", $"似乎插件脱离了框架控制，要结束进程 {item.PID} 吗", "嗯", cancelText: "不是", options: new DialogOptions { FullWidth = true });
            if (r != null && r.Value)
            {
                Process.GetProcessById(item.PID)?.Kill();
            }

            return;
        }

        bool? result = await DialogService.ShowMessageBox("结束进程", $"确定要结束 {item.PluginName} 吗？根据框架设置可能会有不同响应", "嗯", cancelText: "不是", options: new DialogOptions { FullWidth = true });
        if (result == null || !result.Value)
        {
            return;
        }
        await Task.Run(() =>
        {
            plugin.KillProcess();
        });
    }

    private async void ReloadPlugin(DashBoardProcessItem item)
    {
        var plugin = PluginManagerProxy.Proxies.FirstOrDefault(x => x.PluginProcess?.Id == item.PID);
        if (plugin == null)
        {
            await DialogService.ShowMessageBox("嗯？", $"{item.PluginName} 无法被重载，建议结束进程后重新启用");
            return;
        }
        bool? result = await DialogService.ShowMessageBox("重载插件", $"确定要重载 {item.PluginName} 吗？", "嗯", cancelText: "不是", options: new DialogOptions { FullWidth = true });
        if (result == null || !result.Value)
        {
            return;
        }
        await Task.Run(() =>
        {
            PluginManagerProxy.Instance.ReloadPlugin(plugin);
        });
    }
}