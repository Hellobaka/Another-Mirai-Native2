@using Another_Mirai_Native.Config
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<MudPaper style="padding: 10px; margin-top: 10px;" Elevation="3">
    <div style="display: flex;">
        <MudTooltip Text="图片">
            <MudFileUpload Style="margin-top: 0;" T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFile" MaximumFileCount="1">
                <ActivatorContent>
                    <MudIconButton Icon="@Icons.Material.Filled.Image" Color="Color.Secondary"></MudIconButton>
                </ActivatorContent>
            </MudFileUpload>
        </MudTooltip>
        <MudTooltip Text="At Bot">
            <MudIconButton Icon="@Icons.Material.Filled.AlternateEmail" Color="Color.Secondary" OnClick="AtBotClicked"></MudIconButton>
        </MudTooltip>
        <MudTooltip Text="清空">
            <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Secondary" OnClick="ClearSendText"></MudIconButton>
        </MudTooltip>
    </div>
    <div style="display: flex; align-items: center;">
        <MudTextField Disabled="Sending" id="sendTextInput" Lines="3" AutoGrow MaxLines="5" Immediate KeyDownPreventDefault="PreventDefault" OnKeyDown="SendTextKeyDown" @ref="SendTextElement" T="string" AutoFocus @bind-Value="@SendText" Variant="Variant.Outlined" Label="发送文本" HelperText="Shift + Enter换行"></MudTextField>
        <MudIconButton Disabled="Sending" Size="Size.Medium" Icon="@Icons.Material.Filled.Send" Style="margin: 6px 0 22px 6px;" Color="Color.Primary" OnClick="OnSendButtonClick"></MudIconButton>
    </div>
</MudPaper>

@code {
    // TODO: 表情、图片选择窗口
    // TODO: @选人界面
    // TODO: 粘贴图片
    private MudTextField<string> SendTextElement { get; set; }
    public string SendText { get; set; } = "";
    public List<string> SendHistories { get; set; } = [];
    private int MessageHistoryIndex { get; set; } = 0;
    private bool PreventDefault { get; set; }
    private bool sending = false;

    [Parameter]
    public EventCallback<string> OnMessageSend { get; set; }

    [Parameter]
    public bool Sending
    {
        get => sending;
        set
        {
            sending = value;
            if (!sending)
            {
                InvokeAsync(async () =>
                {
                    await ClearSendText();
                });
            }
        }
    }

    private async Task AtBotClicked()
    {
        await SendTextElement.SetText(SendText + $" [CQ:at,qq={AppConfig.Instance.CurrentQQ}]");
    }

    private async Task SendTextKeyDown(KeyboardEventArgs key)
    {
        PreventDefault = false;
        if (key.Key == "Enter" && !key.ShiftKey)
        {
            PreventDefault = true;
            await CallSendMessage();
        }
        else if (key.Key == "ArrowUp")
        {
            MessageHistoryIndex++;
            if (MessageHistoryIndex > SendHistories.Count)
            {
                MessageHistoryIndex = SendHistories.Count;
            }
            if (SendHistories.Count == 0)
            {
                return;
            }
            string text = SendHistories[SendHistories.Count - MessageHistoryIndex];
            await SendTextElement.SetText(text);
        }
        else if (key.Key == "ArrowDown")
        {
            MessageHistoryIndex--;
            if (MessageHistoryIndex <= 0)
            {
                MessageHistoryIndex = 0;
                await SendTextElement.SetText("");
                return;
            }
            string text = SendHistories[SendHistories.Count - MessageHistoryIndex];
            await SendTextElement.SetText(text);
        }
    }

    public async Task ClearSendText()
    {
        await SendTextElement.Clear();
        await SendTextElement.BlurAsync();
        await SendTextElement.FocusAsync();
    }

    public async Task AppendText(string text)
    {
        await SendTextElement.SetText(SendText + text);
    }

    public async Task OnSendButtonClick()
    {
        await CallSendMessage();
    }

    private async Task CallSendMessage()
    {
        if (string.IsNullOrWhiteSpace(SendText))
        {
            await ClearSendText();
            return;
        }
        Sending = true;
        await OnMessageSend.InvokeAsync(SendText);
    }

    private async Task UploadFile(IBrowserFile upload)
    {
        int minFileSize = 4 * 1024, maxFileSize = 5 * 1024 * 1024;
        if (upload.Size < minFileSize || upload.Size > maxFileSize)
        {
            Snackbar.Add("上传图片文件尺寸不得大于 5MB 且不得小于 4KB", Severity.Error);
            return;
        }
        Sending = true;
        try
        {
            byte[] buffer = new byte[upload.Size];
            await upload.OpenReadStream().ReadAsync(buffer);

            string fileName = Path.GetFileName(upload.Name);
            string imageDirectory = @"data\image";
            string cqCode = $"[CQ:image,file={fileName.Replace(".cqimg", "")}]";
            if (fileName.EndsWith(".cqimg"))
            {
                File.WriteAllBytes(Path.Combine(imageDirectory, fileName), buffer);
            }
            else
            {
                cqCode = $"[CQ:image,file=cached\\{fileName}]";
                imageDirectory = Path.Combine(imageDirectory, "cached");
                Directory.CreateDirectory(imageDirectory);
                File.WriteAllBytes(Path.Combine(imageDirectory, fileName), buffer);
            }

            await SendTextElement.SetText(SendText + cqCode);
        }
        catch (Exception e)
        {
            Snackbar.Add($"图片上传失败：{e.Message}", Severity.Error);
        }
        finally
        {
            Sending = false;
        }
    }
}
