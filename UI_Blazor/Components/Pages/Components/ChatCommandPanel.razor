@using Another_Mirai_Native.Config
@using ImageMagick
@inject ISnackbar Snackbar
@inject IJSRuntime JS

<InputFile OnChange="@OnNativeUpload" @ref="InputFile" id="nativeUpload" style="display: none" />
<MudPaper Class="@(Dense ? "command-dense" : "")" style="padding: 10px; padding-bottom: 0; position: relative; background-color: var(--mud-palette-background);">
    <div style="display: flex;">
        <MudCollapse Expanded="@(!Dense || ShowCommandPanel)">
            <MudTooltip Text="图片">
                <MudFileUpload Style="margin-top: 0;" T="IBrowserFile" Accept=".png, .jpg" FilesChanged="UploadFile" MaximumFileCount="1">
                    <ActivatorContent>
                        <MudIconButton Icon="@Icons.Material.Filled.Image" Color="Color.Secondary"></MudIconButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudTooltip>
            <MudTooltip Text="At Bot">
                <MudIconButton Icon="@Icons.Material.Filled.AlternateEmail" Color="Color.Secondary" OnClick="AtBotClicked"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="清空">
                <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Secondary" OnClick="ClearSendText"></MudIconButton>
            </MudTooltip>
        </MudCollapse>
    </div>
    <div style="display: flex; align-items: center;">
        <MudTextField Disabled="Sending" id="sendTextInput" Lines="1" AutoGrow MaxLines="5" Immediate KeyDownPreventDefault="PreventDefault" OnKeyDown="SendTextKeyDown" @ref="SendTextElement" T="string" AutoFocus @bind-Value="@SendText" Variant="Variant.Outlined" Label="发送文本" HelperText="@(Dense ? "": "Shift + Enter换行")"></MudTextField>
        <MudIconButton Class="@(Dense ? "button-dense" : "")" Disabled="Sending" Size="Size.Medium" Icon="@Icons.Material.Filled.Send" Style="margin: 6px 0 22px 0;" Color="Color.Primary" OnClick="OnSendButtonClick"></MudIconButton>
        @if (Dense)
        {
            <MudIconButton Class="@(Dense ? "button-dense" : "")" Size="Size.Medium" Icon="@Icons.Material.Filled.Add" Style="margin: 6px 0 22px 0;" Color="Color.Primary" OnClick="@(() => ShowCommandPanel = !ShowCommandPanel)"></MudIconButton>
        }
    </div>
    <MudOverlay Visible="@Sending" DarkBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Primary" Value="@UploadProgress" />
    </MudOverlay>
</MudPaper>
<style>
    .button-dense {
        margin: 6px 0 0px 0 !important;
    }

    .command-dense {
        width: 100vw;
        position: sticky;
        bottom: 10px;
    }
</style>
<script>
    async function handleUpload(){
        try {
            const clipboardContents = await navigator.clipboard.read();
            for (const item of clipboardContents) {
                // 寻找图片元素
                const type = item.types.find(x => x.includes('image/'))
                if (!type || type.split('/').length !== 2) {
                    continue
                }
                const extension = type.split('/')[1]
                const blob = await item.getType(type);
                const file = new File([blob], `.${extension}`)

                const nativeUpload = document.getElementById('nativeUpload')
                if (!nativeUpload) {
                    continue
                }
                // 构造InputFile参数
                const dataTransfer = new DataTransfer();
                dataTransfer.items.add(file)

                // 检测是否已经修改过
                if (!nativeUpload.modify) {
                    Object.defineProperty(nativeUpload, 'files', {
                        value: dataTransfer.files,
                        writable: true // 将元素设定为可修改
                    });
                    nativeUpload.modify = true
                } else {
                    nativeUpload.files = dataTransfer.files
                }
                //事件触发
                nativeUpload.dispatchEvent(new Event('change', { bubbles: true }))
            }
        } catch (error) {
            console.log(error.message);
        }
    }
</script>
@code {
    // TODO: 表情、图片选择窗口
    // TODO: @选人界面
    private MudTextField<string> SendTextElement { get; set; }
    public string SendText { get; set; } = "";
    public List<string> SendHistories { get; set; } = [];
    private int MessageHistoryIndex { get; set; } = 0;
    private bool PreventDefault { get; set; }
    private InputFile InputFile { get; set; } = new();
    private double UploadProgress { get; set; } = 0;
    public bool Sending { get; set; }
    public bool ShowCommandPanel { get; set; }

    [Parameter]
    public bool Dense { get; set; }

    [Parameter]
    public EventCallback<string> OnMessageSend { get; set; }

    private async Task AtBotClicked()
    {
        await SendTextElement.SetText((SendText ?? "") + $" [CQ:at,qq={AppConfig.Instance.CurrentQQ}]");
    }

    private async Task SendTextKeyDown(KeyboardEventArgs key)
    {
        PreventDefault = false;
        if (key.Key == "Enter" && !key.ShiftKey)
        {
            PreventDefault = true;
            await CallSendMessage();
        }
        else if (key.Key == "ArrowUp")
        {
            MessageHistoryIndex++;
            if (MessageHistoryIndex > SendHistories.Count)
            {
                MessageHistoryIndex = SendHistories.Count;
            }
            if (SendHistories.Count == 0)
            {
                return;
            }
            string text = SendHistories[SendHistories.Count - MessageHistoryIndex];
            await SendTextElement.SetText(text);
        }
        else if (key.Key == "ArrowDown")
        {
            MessageHistoryIndex--;
            if (MessageHistoryIndex <= 0)
            {
                MessageHistoryIndex = 0;
                await SendTextElement.SetText("");
                return;
            }
            string text = SendHistories[SendHistories.Count - MessageHistoryIndex];
            await SendTextElement.SetText(text);
        }
        else if (key.CtrlKey && key.Code == "KeyV")
        {
            await JS.InvokeVoidAsync("handleUpload");
        }
    }

    public async Task ClearSendText()
    {
        await SendTextElement.Clear();
        await SendTextElement.BlurAsync();
        await SendTextElement.FocusAsync();
    }

    public async Task AppendText(string text)
    {
        await SendTextElement.SetText((SendText ?? "") + text);
    }

    public async Task OnSendButtonClick()
    {
        await CallSendMessage();
    }

    private async Task CallSendMessage()
    {
        if (string.IsNullOrWhiteSpace(SendText))
        {
            await ClearSendText();
            return;
        }
        Sending = true;
        await OnMessageSend.InvokeAsync(SendText);
    }

    private async Task OnNativeUpload(InputFileChangeEventArgs e)
    {
        await UploadFile(e.File);
    }

    private async Task UploadFile(IBrowserFile upload)
    {
        if (Sending)
        {
            return;
        }
        int maxFileSize = 5 * 1024 * 1024;
        if (upload.Size > maxFileSize)
        {
            Snackbar.Add("上传图片文件尺寸不得大于 5MB", Severity.Error);
            return;
        }
        Sending = true;
        try
        {
            string fileName = Path.GetFileName(upload.Name);
            if (fileName.StartsWith("."))
            {
                fileName = DateTime.Now.ToString("yyyyMMddHHmmss") + fileName;
            }
            string imageDirectory = @"data\image";
            string cqCode = $"[CQ:image,file={fileName.Replace(".cqimg", "")}]";

            if (!fileName.EndsWith(".cqimg"))
            {
                cqCode = $"[CQ:image,file=cached\\{fileName}]";
                imageDirectory = Path.Combine(imageDirectory, "cached");
                Directory.CreateDirectory(imageDirectory);
            }
            string filePath = Path.Combine(imageDirectory, fileName);
            await using FileStream writeStream = new(filePath, FileMode.OpenOrCreate);
            using var readStream = upload.OpenReadStream(maxFileSize);
            var bytesRead = 0;
            var totalRead = 0;
            var buffer = new byte[1024 * 10];

            while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
            {
                totalRead += bytesRead;
                await writeStream.WriteAsync(buffer, 0, bytesRead);
                UploadProgress = (totalRead / upload.Size) * 100;
                StateHasChanged();
            }
            writeStream.Close();
            await writeStream.DisposeAsync();

            using MagickImage image = new MagickImage(filePath);
            if (image.Format == MagickFormat.Heic || image.Format == MagickFormat.Heif)
            {
                await image.WriteAsync(filePath, MagickFormat.Jpg);
                fileName = Path.ChangeExtension(fileName, ".jpg");
                cqCode = $"[CQ:image,file=cached\\{fileName}]";
            }

            await SendTextElement.SetText((SendText ?? "") + cqCode);
        }
        catch (Exception e)
        {
            Snackbar.Add($"图片上传失败：{e.Message}", Severity.Error);
        }
        finally
        {
            Sending = false;
        }
    }
}
