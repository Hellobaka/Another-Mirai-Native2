@using System.Text.RegularExpressions
@using System.Diagnostics
@using System.Text
@inject ISnackbar Snackbar
@if (Item.DetailItemType == DetailItemType.Notice)
{
    <div style="display:flex; justify-content:center;" id="@($"chatItem_{Item.HistoryId}")">
        <MudChip T="string">@Item.Message</MudChip>
    </div>
}
else
{
    <div id="@($"chatItem_{Item.HistoryId}")" style="@GetContainerStyle()">

        <MudMenu ActivationEvent="@MouseEvent.RightClick" PositionAtCursor="true" Style="cursor: default; margin: 1.25rem 10px 0 10px; align-self: unset;">
            <ActivatorContent>
                <MudAvatar Color="@((Color)Random.Shared.Next(11))" Rounded="@(!Item.Avatar.IsRound)">
                    <MudImage @onerror="OnAvatarLoadFail" @ref="AvatarImage" Src="@GetAvatarSource()"></MudImage>
                    @if (ShowFallbackName)
                    {
                        <MudText @ref="AvatarText">@Item.Avatar.FallbackName[0..1]</MudText>
                    }
                </MudAvatar>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem OnClick="CopyNickClicked" Icon="@Icons.Material.Filled.ContentCopy">复制昵称</MudMenuItem>
                <MudMenuItem OnClick="CopyQQClicked" Icon="@Icons.Material.Filled.ContentCopy">复制QQ</MudMenuItem>
                <MudMenuItem OnClick="AtClicked" Icon="@Icons.Material.Filled.AlternateEmail">@@TA</MudMenuItem>
            </ChildContent>
        </MudMenu>
        <div>
            <MudText Style="font-size: 0.75rem;">@Item.DisplayName</MudText>
            <div>
                <MudMenu ActivationEvent="@MouseEvent.RightClick" PositionAtCursor="true" Style="cursor: default;">
                    <ActivatorContent>
                        @if (SingleImageMode)
                        {
                            <div>
                                @if (!RenderItems.First().ImageFailed)
                                {
                                    <MudImage referrerpolicy="no-referrer" @onerror="() => OnImageFailed(RenderItems.First())" @onclick="() => OnImageClicked(RenderItems.First())" Src="@RenderItems.First().ImageUrl" Class="rounded-lg" ObjectFit="ObjectFit.Contain" Style="min-width: 100px; min-height: 100px; max-width: 100%; max-height: 500px; cursor: pointer;"></MudImage>
                                }
                                else
                                {
                                    <MudPaper Style="width: 100px; height: 100px; display:flex; align-items: center; justify-content: center">
                                        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                                    </MudPaper>
                                }
                            </div>
                        }
                        else
                        {
                            <MudPaper Class="@(Item.DetailItemType == DetailItemType.Receive? "" : "mud-theme-primary")" Elevation="3" Style="padding: 12px; max-width:100%;">
                                <div style="@(Item.DetailItemType == DetailItemType.Send ? "text-align: left" : "")">
                                    @foreach (var item in RenderItems)
                                    {
                                        switch (item.RenderType)
                                        {
                                            case RenderType.At:
                                                <MudLink OnClick="() => AtElementClicked(item.AtTarget)" Color="Color.Warning" Underline="Underline.None" Style="cursor: pointer;">@item.AtNick</MudLink>
                                                break;

                                            case RenderType.Face:
                                                if (!item.ImageFailed)
                                                {
                                                    <MudImage @onerror="() => OnImageFailed(item)" Src="@($"/qq-face/{item.FaceId}.png")" Style="width:24px;height:24px;transform: translateY(7px);"></MudImage>
                                                }
                                                break;

                                            case RenderType.Image:
                                                if (!item.ImageFailed)
                                                {
                                                    <MudImage referrerpolicy="no-referrer" @onerror="() => OnImageFailed(item)" @onclick="() => OnImageClicked(item)" Src="@item.ImageUrl" Class="rounded-lg" ObjectFit="ObjectFit.Contain" Style="min-width: 100px; min-height: 100px; max-width: 50%; max-height: 500px; cursor: pointer;"></MudImage>
                                                }
                                                else
                                                {
                                                    <MudPaper Style="width: 100px; height: 100px; display:flex; align-items: center; justify-content: center">
                                                        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
                                                    </MudPaper>
                                                }
                                                break;

                                            case RenderType.Reply:
                                                if (item.ReplyId != 0)
                                                {
                                                    <MudPaper Class="replyItem" Elevation="0" @onclick="() => ReplyClicked(item.ReplyId)">
                                                        <MudText Typo="Typo.body2" Class="replySubItem">@item.ReplyNickName</MudText>
                                                        <MudText Typo="Typo.body2" Class="replySubItem">@item.ReplyContent</MudText>
                                                    </MudPaper>
                                                }
                                                break;
                                            case RenderType.Text:
                                                if (!string.IsNullOrEmpty(item.Text))
                                                {
                                                    <span class="mud-typography mud-typography-body1" style="text-align: left; user-select: text; white-space: pre-wrap; word-break: break-word;">
                                                        @item.Text
                                                    </span>
                                                }
                                                break;

                                            case RenderType.Url:
                                                <MudLink Color="Color.Warning" Href="@item.Text" Target="_blank" Underline="Underline.Always" Style="cursor: pointer;">@item.Text</MudLink>
                                                break;

                                            case RenderType.Other:
                                                <MudExpansionPanels Style="background: transparent;">
                                                    <MudExpansionPanel Text="CQ码" Style="background: transparent;">
                                                        <span class="mud-typography mud-typography-body1" style="text-align: left; user-select: text; white-space: pre-wrap; word-break: break-word;">
                                                            @item.Text
                                                        </span>
                                                    </MudExpansionPanel>
                                                </MudExpansionPanels>
                                                break;
                                        }
                                    }
                                </div>
                            </MudPaper>
                        }
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="CopyClicked" Disabled="!CopyEnabled" Icon="@Icons.Material.Filled.ContentCopy">复制</MudMenuItem>
                        <MudMenuItem OnClick="RepeatClicked" Disabled="!RepeatEnabled" Icon="@Icons.Material.Filled.PlusOne">复读</MudMenuItem>
                        <MudMenuItem OnClick="AtClicked" Disabled="!AtEnabled" Icon="@Icons.Material.Filled.AlternateEmail">@@TA</MudMenuItem>
                        <MudMenuItem OnClick="ReplyClicked" Disabled="!ReplyEnabled" Icon="@Icons.Material.Filled.Reply">回复</MudMenuItem>
                        <MudDivider/>
                        <MudMenuItem OnClick="RevokeClicked" Disabled="!RevokeEnabled" Icon="@Icons.Material.Filled.Delete">撤回</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>
            <div style="@("display: flex; align-items: center;" + (Item.DetailItemType == DetailItemType.Receive ? "" : "flex-direction: row-reverse;"))">
                <MudText Style="font-size: 0.75rem;">@Item.Time</MudText>
                @if (Item.Recalled)
                {
                    <MudText Style="font-size: 0.75rem;margin-left: 0.25rem;">[已撤回]</MudText>
                }
            </div>
        </div>
        <div style="display:flex; align-items:center; flex-direction: column; justify-content: center;">
            @if (Item.Sending)
            {
                <MudProgressCircular Indeterminate Size="Size.Small" />
            }
            @if (Item.Failed && !Item.Sending && EnableErrorIcon)
            {
                <MudIconButton Size="Size.Medium" Icon="@Icons.Material.Filled.Error" Color="Color.Error" OnClick="OnResendButtonClick"></MudIconButton>
            }
        </div>
    </div>
}

<style>
    .mud-menu *{
        cursor: auto;
    }
    .replyItem {
        padding: 9px;
        border: 1px solid var(--mud-palette-text-primary);
        border-top: 0;
        border-right: 0;
        border-bottom: 0;
        transition: background-color 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
        cursor: pointer;
        background: #ffffff00;
        margin-bottom: 10px;
    }
    .replySubItem {
        cursor: inherit;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 200px;
        white-space: nowrap;
    }
    .replyItem:hover{
        background: #ffffff40;
    }
</style>

@code {
    [Parameter]
    public ChatItemModel Item { get; set; }

    [Parameter]
    public bool CopyEnabled { get; set; } = true;

    [Parameter]
    public bool RepeatEnabled { get; set; } = true;

    [Parameter]
    public bool AtEnabled { get; set; } = true;

    [Parameter]
    public bool ReplyEnabled { get; set; } = true;

    [Parameter]
    public bool RevokeEnabled { get; set; } = true;

    [Parameter]
    public bool EnableErrorIcon { get; set; } = true;

    private bool ShowFallbackName { get; set; } = false;
    private MudImage AvatarImage { get; set; }
    private MudText AvatarText { get; set; }
    private List<RenderChatItem> RenderItems { get; set; } = [];
    private static Regex CQCodeRegex { get; set; } = new Regex(@"(\[CQ:.*?,.*?\])");
    private static Regex URLRegex { get; set; } = new("(https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(?::\\d+)?(?:/[^\\s]*)?)");
    private bool OtherExpand { get; set; }
    private bool SingleImageMode { get; set; }

    private static string[] FallbackColors { get; set; } = new[]
    {
        $"rgb(255, 87, 51)", // Crimson
        $"rgb(52, 152, 219)", // SkyBlue
        $"rgb(46, 204, 113)", // Emerald
        $"rgb(155, 89, 182)", // Amethyst
        $"rgb(52, 73, 94)", // Asphalt
        $"rgb(22, 160, 133)", // Turquoise
        $"rgb(39, 174, 96)", // Nephritis
        $"rgb(41, 128, 185)", // BelizeHole
        $"rgb(142, 68, 173)", // Wisteria
        $"rgb(241, 196, 15)", // Sunflower
        $"rgb(230, 126, 34)", // Carrot
        $"rgb(231, 76, 60)", // Alizarin
        $"rgb(236, 240, 241)", // Clouds
        $"rgb(149, 165, 166)", // Concrete
        $"rgb(243, 156, 18)", // Orange
        $"rgb(211, 84, 0)", // Pumpkin
        $"rgb(192, 57, 43)", // Pomegranate
        $"rgb(189, 195, 199)", // Silver
        $"rgb(127, 140, 141)", // Asbestos
        $"rgb(44, 62, 80)" // MidnightBlue
    };

    [Parameter]
    public EventCallback<ChatItemModel> OnCopy { get; set; }

    [Parameter]
    public EventCallback<ChatItemModel> OnCopyNick { get; set; }

    [Parameter]
    public EventCallback<ChatItemModel> OnCopyQQ { get; set; }

    [Parameter]
    public EventCallback<ChatItemModel> OnRepeat { get; set; }

    [Parameter]
    public EventCallback<ChatItemModel> OnAt { get; set; }

    [Parameter]
    public EventCallback<ChatItemModel> OnReply { get; set; }

    [Parameter]
    public EventCallback<ChatItemModel> OnResend { get; set; }

    [Parameter]
    public EventCallback<ChatItemModel> OnRevoke { get; set; }

    [Parameter]
    public EventCallback<int> OnReplyJumpReuquest { get; set; }

    [Parameter]
    public EventCallback<long> OnAtElementClicked { get; set; }

    [Parameter]
    public EventCallback<RenderChatItem> OnImagePreview { get; set; }

    protected override void OnParametersSet()
    {
        Task.Run(async () =>
        {
            string name = "";
            if(Item.ParentType == AvatarTypes.QQGroup)
            {
                name = await ChatHistoryHelper.GetGroupMemberNick(Item.ParentId, Item.Id);
            }
            else
            {
                name = await ChatHistoryHelper.GetFriendNick(Item.Id);
            }
            Item.DisplayName = name;
            if (!string.IsNullOrEmpty(Item.PluginName))
            {
                Item.DisplayName += $" [{Item.PluginName}]";
            }
            Item.Avatar.FallbackName = Item.DisplayName;
            await InvokeAsync(() => StateHasChanged());
        });
        Task.Run(async () =>
        {
            RenderItems = await ParseMessageToRenderItems(Item.Message);
            SingleImageMode = RenderItems.Count == 1 && RenderItems.First().RenderType == RenderType.Image;
            await InvokeAsync(() => StateHasChanged());
        });
    }

    private string GetAvatarSource()
    {
        string imgUrl = "";
        switch (Item.Avatar.AvatarType)
        {
            case AvatarTypes.QQPrivate:
                imgUrl = $"https://q.qlogo.cn/g?b=qq&nk={Item.Avatar.Id}&s=160";
                break;

            case AvatarTypes.QQGroup:
                imgUrl = $"http://p.qlogo.cn/gh/{Item.Avatar.Id}/{Item.Avatar.Id}/0";
                break;

            case AvatarTypes.Fallback:
                break;
        }
        return imgUrl;
    }

    private void OnAvatarLoadFail()
    {
        AvatarImage.Style = "display: none";
        ShowFallbackName = true;
    }

    private string GetContainerStyle()
    {
        string baseStyle = "display: flex; flex-wrap: nowrap; margin-top: 15px;";
        switch (Item.DetailItemType)
        {
            case DetailItemType.Send:
                baseStyle += " flex-direction: row-reverse; text-align: right; margin-left: 30px;";
                break;

            default:
            case DetailItemType.Receive:
                baseStyle += " margin-right: 30px;";
                break;

        }
        return baseStyle;
    }

    private async Task CopyClicked()
    {
        if (CopyEnabled is false)
        {
            return;
        }
        await OnCopy.InvokeAsync(Item);
    }

    private async Task CopyNickClicked()
    {
        await OnCopyNick.InvokeAsync(Item);
    }

    private async Task CopyQQClicked()
    {
        await OnCopyQQ.InvokeAsync(Item);
    }

    private async Task RepeatClicked()
    {
        if (RepeatEnabled is false)
        {
            return;
        }
        await OnRepeat.InvokeAsync(Item);
    }

    private async Task AtClicked()
    {
        if (AtEnabled is false)
        {
            return;
        }
        await OnAt.InvokeAsync(Item);
    }

    private async Task ReplyClicked()
    {
        if (ReplyEnabled is false)
        {
            return;
        }
        await OnReply.InvokeAsync(Item);
    }

    private async Task RevokeClicked()
    {
        if (RevokeEnabled is false)
        {
            return;
        }
        await OnRevoke.InvokeAsync(Item);
    }

    private async Task ReplyClicked(int id)
    {
        await OnReplyJumpReuquest.InvokeAsync(id);
    }

    private async Task AtElementClicked(long id)
    {
        await OnAtElementClicked.InvokeAsync(id);
    }

    private async Task OnResendButtonClick()
    {
        await OnResend.InvokeAsync(Item);
    }

    private async Task<List<RenderChatItem>> ParseMessageToRenderItems(string plain)
    {
        List<RenderChatItem> result = [];

        var parts = CQCodeRegex.Split(plain);
        foreach (var part in parts.Where(x => !string.IsNullOrEmpty(x)))
        {
            var cqcodes = CQCode.Parse(part);
            if (cqcodes.Count == 0)
            {
                result = result.Concat(ParsePlainText(part)).ToList();
            }
            else
            {
                foreach(var item in cqcodes)
                {
                    try
                    {
                        RenderChatItem renderItem = new();
                        renderItem.Text = part;
                        switch (item.Function)
                        {
                            case Model.Enums.CQCodeType.Image:
                                renderItem.RenderType = RenderType.Image;
                                renderItem.ImageUrl = await GetImageUrlFromCQCode(item);
                                renderItem.ImageFailed = string.IsNullOrWhiteSpace(renderItem.ImageUrl);
                                break;

                            case Model.Enums.CQCodeType.Reply:
                                renderItem.RenderType = RenderType.Reply;
                                renderItem.ReplyId = int.Parse(item.Items["id"]);
                                result.Insert(0, renderItem);
                                Task.Run(async () =>
                                {
                                    var messageItem = ChatHistoryHelper.GetHistoriesByMsgId(Item.ParentId, renderItem.ReplyId, Item.ParentType == AvatarTypes.QQGroup ? ChatHistoryType.Group : ChatHistoryType.Private);
                                    if (messageItem == null)
                                    {
                                        // Snackbar.Add($"无法找到ID={renderItem.ReplyId}的历史消息", Severity.Error);
                                        result.Remove(renderItem);
                                        return;
                                    }
                                    renderItem.ReplyNickName = Item.ParentType == AvatarTypes.QQGroup ?
                                        await ChatHistoryHelper.GetGroupMemberNick(Item.ParentId, messageItem.SenderID) :
                                        await ChatHistoryHelper.GetFriendNick(messageItem.SenderID);
                                    renderItem.ReplyContent = messageItem.Message;

                                    await InvokeAsync(() => StateHasChanged());
                                });
                                continue;

                            case Model.Enums.CQCodeType.At:
                                renderItem.RenderType = RenderType.At;
                                renderItem.AtTarget = long.Parse(item.Items["qq"]);
                                renderItem.AtNick = "@" + renderItem.AtTarget.ToString();
                                Task.Run(async () =>
                                {
                                    renderItem.AtNick = "@" + (Item.ParentType == AvatarTypes.QQGroup ?
                                        await ChatHistoryHelper.GetGroupMemberNick(Item.ParentId, renderItem.AtTarget) :
                                        await ChatHistoryHelper.GetFriendNick(renderItem.AtTarget));
                                    await InvokeAsync(() => StateHasChanged());
                                });
                                break;

                            case Model.Enums.CQCodeType.Face:
                                renderItem.RenderType = RenderType.Face;
                                renderItem.FaceId = int.Parse(item.Items["id"]);
                                break;

                            default:
                                renderItem.RenderType = RenderType.Other;
                                break;
                        }
                        result.Add(renderItem);
                    }
                    catch
                    {
                        // Snackbar.Add($"转换CQ码失败，内容：{item}", Severity.Error);
                    }                    
                }
            }
        }
        return result;
    }

    private async Task<string?> GetImageUrlFromCQCode(CQCode cqCode)
    {
        if (cqCode.IsImageCQCode)
        {
            string? path = Helper.GetImageUrlOrPathFromCQCode(cqCode);
            if (path.StartsWith("http"))
            {
                path = await Helper.DownloadImageAsync(path, cqCode.GetPicName());
                if (string.IsNullOrEmpty(path))
                {
                    return null;
                }
                else
                {
                    return "/" + Path.GetRelativePath("data", path);
                }
            }
            else if (!string.IsNullOrEmpty(path))
            {
                return "/" + Path.GetRelativePath("data", path);
            }
        }
        return null;
    }

    private List<RenderChatItem> ParsePlainText(string plain)
    {
        List<RenderChatItem> result = [];
        foreach(var item in URLRegex.Split(plain).Where(x => !string.IsNullOrEmpty(x)))
        {
            if (item.StartsWith("http"))
            {
                result.Add(new RenderChatItem
                {
                    Text = item,
                    RenderType = RenderType.Url
                });
            }
            else
            {
                result.Add(new RenderChatItem
                {
                    Text = item,
                    RenderType = RenderType.Text
                });
            }
        }
        return result;
    }

    private void OnImageFailed(RenderChatItem item)
    {
        item.ImageFailed = true;
        StateHasChanged();
    }

    private async Task OnImageClicked(RenderChatItem item)
    {
        await OnImagePreview.InvokeAsync(item);
    }
}
