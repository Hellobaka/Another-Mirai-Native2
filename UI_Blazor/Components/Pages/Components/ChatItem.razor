@using System.Text.RegularExpressions
@using System.Diagnostics
@using System.Text
@inject ISnackbar Snackbar
@if (Item.DetailItemType == DetailItemType.Notice)
{
    <div style="display:flex; justify-content:center;">
        <MudChip T="string">@Item.Message</MudChip>
    </div>
}
else
{
    <div style="@GetContainerStyle()">
        <MudAvatar Style="margin: 1.25rem 10px 0 10px;" Color="@((Color)new Random(Item.Id.GetHashCode()).Next(11))" Rounded="@(!Item.Avatar.IsRound)">
            <MudImage @onerror="OnAvatarLoadFail" @ref="AvatarImage" Src="@GetAvatarSource()"></MudImage>
            @if (ShowFallbackName)
            {
                <MudText @ref="AvatarText">@Item.Avatar.FallbackName[0..1]</MudText>
            }
        </MudAvatar>
        <div>
            <MudText Style="font-size: 0.75rem;">@Item.DisplayName</MudText>
            <div>
                <MudMenu ActivationEvent="@MouseEvent.RightClick" PositionAtCursor="true" Style="cursor: default;">
                    <ActivatorContent>
                        <MudPaper Class="@(Item.DetailItemType == DetailItemType.Receive? "mud-theme-primary" : "mud-theme-info")" Style="padding: 12px;">
                            <div style="@(Item.DetailItemType == DetailItemType.Send ? "text-align: left" : "")">
                                @foreach (var item in RenderItems)
                                {
                                    switch (item.RenderType)
                                    {
                                        case RenderType.At:
                                            <MudLink Color="Color.Warning" Underline="Underline.None" Style="cursor: pointer;">@item.AtNick</MudLink>
                                            break;

                                        case RenderType.Face:
                                            <MudText Inline>
                                                @item.Text
                                            </MudText>
                                            break;

                                        case RenderType.Image:
                                            <MudImage Src="@item.ImageUrl"></MudImage>
                                            break;

                                        case RenderType.Reply:
                                            if (item.ReplyId != 0)
                                            {
                                                <MudPaper>
                                                </MudPaper>
                                            }
                                            break;
                                        case RenderType.Text:
                                            if (!string.IsNullOrEmpty(item.Text))
                                            {
                                                <span class="mud-typography mud-typography-body1" style="text-align: left; user-select: text; white-space: pre-wrap;">
                                                    @item.Text
                                                </span>
                                            }
                                            break;
                                        case RenderType.Url:
                                            <MudLink Color="Color.Warning" Href="@item.Text" Target="_blank" Underline="Underline.Always" Style="cursor: pointer;">@item.Text</MudLink>
                                            break;
                                        case RenderType.Other:
                                            <MudPaper>
                                                <MudStack Spacing="2">
                                                    <MudButton OnClick="@(() => OtherExpand = !OtherExpand)">CQ码</MudButton>
                                                    <MudDivider />
                                                    <MudCollapse Expanded="OtherExpand">
                                                        @item.Text
                                                    </MudCollapse>
                                                </MudStack>
                                            </MudPaper>
                                            break;
                                    }
                                }
                            </div>
                        </MudPaper>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="CopyClicked" Disabled="!CopyEnabled">复制</MudMenuItem>
                        <MudMenuItem OnClick="RepeatClicked" Disabled="!RepeatEnabled">+1</MudMenuItem>
                        <MudMenuItem OnClick="AtClicked" Disabled="!AtEnabled">@@</MudMenuItem>
                        <MudMenuItem OnClick="ReplyClicked" Disabled="!ReplyEnabled">回复</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>
            <div style="display: flex; align-items: center;">
                <MudText Style="font-size: 0.75rem;">@Item.Time</MudText>
                @if (Item.Recalled)
                {
                    <MudText Style="font-size: 0.75rem;margin-left: 0.25rem;">[已撤回]</MudText>
                }
            </div>
        </div>
        <div style="display:flex; align-items:center; flex-direction: column; justify-content: center;">
            @if (Item.Sending)
            {
                <MudProgressCircular Indeterminate Size="Size.Small" />
            }
            @if (Item.Failed)
            {
                <MudIconButton Size="Size.Medium" Icon="@Icons.Material.Filled.Error" Color="Color.Error" OnClick="OnResendButtonClick"></MudIconButton>
            }
        </div>
    </div>
}

<style>
    .mud-menu *{
        cursor: auto;
    }
</style>

@code {
    // TODO: 元素样式：图片、URL、At、表情、Reply
    // TODO: 折叠无法解析的CQ码
    // TODO: 头像菜单
    // TODO: 撤回
    // TODO: 点击Reply事件
    // TODO: 图片预览
    [Parameter]
    public ChatItemModel Item { get; set; }

    [Parameter]
    public bool CopyEnabled { get; set; } = true;

    [Parameter]
    public bool RepeatEnabled { get; set; } = true;

    [Parameter]
    public bool AtEnabled { get; set; } = true;

    [Parameter]
    public bool ReplyEnabled { get; set; } = true;

    private bool ShowFallbackName { get; set; } = false;
    private MudImage AvatarImage { get; set; }
    private MudText AvatarText { get; set; }
    private List<RenderChatItem> RenderItems { get; set; } = [];
    private static Regex CQCodeRegex { get; set; } = new Regex(@"(\[CQ:.*?,.*?\])");
    private static Regex URLRegex { get; set; } = new("(https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(?::\\d+)?(?:/[^\\s]*)?)");
    private bool OtherExpand { get; set; }

    private static string[] FallbackColors { get; set; } = new[]
    {
        $"rgb(255, 87, 51)", // Crimson
        $"rgb(52, 152, 219)", // SkyBlue
        $"rgb(46, 204, 113)", // Emerald
        $"rgb(155, 89, 182)", // Amethyst
        $"rgb(52, 73, 94)", // Asphalt
        $"rgb(22, 160, 133)", // Turquoise
        $"rgb(39, 174, 96)", // Nephritis
        $"rgb(41, 128, 185)", // BelizeHole
        $"rgb(142, 68, 173)", // Wisteria
        $"rgb(241, 196, 15)", // Sunflower
        $"rgb(230, 126, 34)", // Carrot
        $"rgb(231, 76, 60)", // Alizarin
        $"rgb(236, 240, 241)", // Clouds
        $"rgb(149, 165, 166)", // Concrete
        $"rgb(243, 156, 18)", // Orange
        $"rgb(211, 84, 0)", // Pumpkin
        $"rgb(192, 57, 43)", // Pomegranate
        $"rgb(189, 195, 199)", // Silver
        $"rgb(127, 140, 141)", // Asbestos
        $"rgb(44, 62, 80)" // MidnightBlue
    };

    [Parameter]
    public EventCallback<ChatItemModel> OnCopy { get; set; }

    [Parameter]
    public EventCallback<ChatItemModel> OnRepeat { get; set; }

    [Parameter]
    public EventCallback<ChatItemModel> OnAt { get; set; }

    [Parameter]
    public EventCallback<ChatItemModel> OnReply { get; set; }

    [Parameter]
    public EventCallback<ChatItemModel> OnResend { get; set; }

    protected override void OnParametersSet()
    {
        Task.Run(async () =>
        {
            string name = "";
            if(Item.ParentType == AvatarTypes.QQGroup)
            {
                name = await ChatHistoryHelper.GetGroupMemberNick(Item.ParentId, Item.Id);
            }
            else
            {
                name = await ChatHistoryHelper.GetFriendNick(Item.Id);
            }
            Item.DisplayName = name;
            Item.Avatar.FallbackName = name;
            await InvokeAsync(() => StateHasChanged());
        });
        Task.Run(async () =>
        {
            RenderItems = ParseMessageToRenderItems(Item.Message);
            await InvokeAsync(() => StateHasChanged());
        });
    }

    private string GetAvatarSource()
    {
        string imgUrl = "";
        switch (Item.Avatar.AvatarType)
        {
            case AvatarTypes.QQPrivate:
                imgUrl = $"https://q.qlogo.cn/g?b=qq&nk={Item.Avatar.Id}&s=160";
                break;

            case AvatarTypes.QQGroup:
                imgUrl = $"http://p.qlogo.cn/gh/{Item.Avatar.Id}/{Item.Avatar.Id}/0";
                break;

            case AvatarTypes.Fallback:
                break;
        }
        return imgUrl;
    }

    private void OnAvatarLoadFail()
    {
        AvatarImage.Style = "display: none";
        ShowFallbackName = true;
    }

    private string GetContainerStyle()
    {
        string baseStyle = "display: flex; flex-wrap: nowrap; margin-top: 15px;";
        switch (Item.DetailItemType)
        {
            case DetailItemType.Send:
                baseStyle += " flex-direction: row-reverse; text-align: right; margin-left: 30px;";
                break;

            default:
            case DetailItemType.Receive:
                baseStyle += " margin-right: 30px;";
                break;

        }
        return baseStyle;
    }

    private async Task CopyClicked()
    {
        if (CopyEnabled is false)
        {
            return;
        }
        await OnCopy.InvokeAsync(Item);
    }

    private async Task RepeatClicked()
    {
        if (RepeatEnabled is false)
        {
            return;
        }
        await OnRepeat.InvokeAsync(Item);
    }

    private async Task AtClicked()
    {
        if (AtEnabled is false)
        {
            return;
        }
        await OnAt.InvokeAsync(Item);
    }

    private async Task ReplyClicked()
    {
        if (ReplyEnabled is false)
        {
            return;
        }
        await OnReply.InvokeAsync(Item);
    }

    private async Task OnResendButtonClick()
    {
        await OnResend.InvokeAsync(Item);
    }

    private List<RenderChatItem> ParseMessageToRenderItems(string plain)
    {
        Stopwatch sw = Stopwatch.StartNew();
        List<RenderChatItem> result = [];

        var parts = CQCodeRegex.Split(plain);
        foreach (var part in parts.Where(x => !string.IsNullOrEmpty(x)))
        {
            var cqcodes = CQCode.Parse(part);
            if (cqcodes.Count == 0)
            {
                result = result.Concat(ParsePlainText(part)).ToList();
            }
            else
            {
                foreach(var item in cqcodes)
                {
                    try
                    {
                        RenderChatItem renderItem = new();
                        renderItem.Text = part;
                        switch (item.Function)
                        {
                            case Model.Enums.CQCodeType.Image:
                                renderItem.RenderType = RenderType.Image;
                                renderItem.ImageUrl = GetImageUrlFromCQCode(item);
                                break;

                            case Model.Enums.CQCodeType.Reply:
                                renderItem.RenderType = RenderType.Reply;
                                renderItem.ReplyId = int.Parse(item.Items["id"]);
                                result.Insert(0, renderItem);
                                continue;

                            case Model.Enums.CQCodeType.At:
                                renderItem.RenderType = RenderType.At;
                                renderItem.AtTarget = long.Parse(item.Items["qq"]);
                                renderItem.AtNick = "@" + renderItem.AtTarget.ToString();
                                Task.Run(async () =>
                                {
                                    renderItem.AtNick = "@" + await ChatHistoryHelper.GetFriendNick(renderItem.AtTarget);
                                    await InvokeAsync(() => StateHasChanged());
                                });
                                break;

                            case Model.Enums.CQCodeType.Face:
                                renderItem.RenderType = RenderType.Face;
                                renderItem.FaceId = int.Parse(item.Items["id"]);
                                break;

                            default:
                                renderItem.RenderType = RenderType.Other;
                                break;
                        }
                        result.Add(renderItem);
                    }
                    catch
                    {
                        Snackbar.Add($"转换CQ码失败，内容：{item}", Severity.Error);
                    }                    
                }
            }
        }
        
        sw.Stop();
        Console.WriteLine($"Parse {plain} cost: {sw.ElapsedMilliseconds}ms");
        return result;
    }

    private string? GetImageUrlFromCQCode(CQCode cqCode)
    {
        if (cqCode.IsImageCQCode)
        {
            string path = cqCode.Items["file"];
            if (path.Contains('.'))
            {
                path = Path.Combine("data", "image", path);
                if (File.Exists(path))
                {
                    string imagePath = Path.Combine("wwwroot", "images");
                    string newPath = Path.Combine(imagePath, Path.GetFileName(path));
                    Directory.CreateDirectory(imagePath);
                    File.Copy(path, newPath, true);

                    return $"/images/{Path.GetFileName(newPath)}";
                }
                else
                {
                    return null;
                }
            }
            else
            {
                return Helper.GetPicUrlFromCQImg(cqCode.ToString());
            }
        }
        return null;
    }

    private List<RenderChatItem> ParsePlainText(string plain)
    {
        List<RenderChatItem> result = [];
        foreach(var item in URLRegex.Split(plain).Where(x => !string.IsNullOrEmpty(x)))
        {
            if (item.StartsWith("http"))
            {
                result.Add(new RenderChatItem
                {
                    Text = item,
                    RenderType = RenderType.Url
                });
            }
            else
            {
                result.Add(new RenderChatItem
                {
                    Text = item,
                    RenderType = RenderType.Text
                });
            }
        }
        return result;
    }
}
