@page "/plugins"
@using Another_Mirai_Native.BlazorUI.Components.Layout
@using Another_Mirai_Native.Config
@using Another_Mirai_Native.Native
@using System.Collections.ObjectModel
@implements IDisposable
@inject IDialogService DialogService
@inject Shared Shared

<MudGrid Style="padding: 16px;">
    <MudItem xs="12" md="6">
        <MudPaper Elevation="4">
            <MudDataGrid RowStyle="cursor: pointer;" RowClassFunc="@RowClassFunc" Loading="@Loading" FixedHeader="true" Hover="true" SelectOnRowClick="true" SortMode="SortMode.None" Items="CQPlugins" SelectedItem="@SelectedItem" T="CQPluginProxyWrapper" SelectedItemChanged="SelectedItemChanged" MultiSelection="false">
                <ToolBarContent>
                    <MudText>已加载 @CQPlugins.Count 个插件 已启动 @CQPlugins.Count(x => x.TargetPlugin.Enabled) 个插件</MudText>
                </ToolBarContent>
                <Columns>
                    <PropertyColumn Property="x => x.TargetPlugin.Enabled" Title="插件状态" HeaderStyle="width: 6em;" CellClassFunc="@CellClassFunc">
                        <CellTemplate>
                            <div style="text-align: center; display: flex; justify-content: center; align-items: center;">
                                @if (context.Item.TargetPlugin.AppInfo.AuthCode == AppConfig.Instance.TestingAuthCode)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.BugReport" />
                                }
                                else if (context.Item.TargetPlugin == null || (context.Item.TargetPlugin.HasConnection && context.Item.TargetPlugin.Enabled))
                                {

                                }
                                else if (context.Item.TargetPlugin.Enabled is false)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.DisabledByDefault" />
                                }
                            </div>
                        </CellTemplate>
                    </PropertyColumn>
                    <PropertyColumn Property="x => x.TargetPlugin.PluginName" Title="插件名称" CellClassFunc="@CellClassFunc" />
                    <PropertyColumn Property="x => x.TargetPlugin.AppInfo.author" Title="作者" CellClassFunc="@CellClassFunc" />
                    <PropertyColumn Property="x => x.TargetPlugin.AppInfo.version" Title="版本" CellClassFunc="@CellClassFunc" />
                </Columns>
            </MudDataGrid>

            <div style="margin: 10px; padding: 10px;">
                <MudButton Color="Color.Secondary" @onclick="ReloadAllClick">
                    <MudProgressCircular Size="Size.Small" Color="Color.Secondary" Indeterminate="true" style="@(ReloadAllRunningStatus ? "" : "display: none;")" />
                    重载所有插件
                </MudButton>
            </div>
        </MudPaper>
    </MudItem>
    @if (ShowActionDrawer)
    {
        <MudDrawer Width="80%" @bind-Open="@ActionDrawerOpen" Anchor="@Anchor.Right" Elevation="10" Variant="@DrawerVariant.Temporary" OverlayAutoClose="true">
            <div style="padding: 16px;">
                <PluginManageDrawer CurrentPlugin="SelectedItem" />
            </div>
        </MudDrawer>
    }
    else 
    {
        <MudItem xs="12" md="6">
            <MudPaper Elevation="4">
                <MudContainer Style="padding: 20px;">
                    <PluginManageDrawer CurrentPlugin="SelectedItem" />
                </MudContainer>
            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code {
    private ObservableCollection<CQPluginProxyWrapper> CQPlugins { get; set; } = new();
    private CQPluginProxyWrapper? SelectedItem { get; set; }
    private bool Loading { get; set; }
    private bool ReloadAllRunningStatus { get; set; }
    private bool ShowActionDrawer { get; set; }
    private bool ActionDrawerOpen { get; set; }
    private CQPluginProxy? SelectedPlugin => SelectedItem?.TargetPlugin;

    protected override void OnInitialized()
    {
        PluginManagerProxy.OnPluginEnableChanged -= PluginManagerProxy_OnPluginEnableChanged;
        PluginManagerProxy.OnPluginProxyAdded -= PluginManagerProxy_OnPluginProxyAdded;
        PluginManagerProxy.OnPluginProxyConnectStatusChanged -= PluginManagerProxy_OnPluginProxyConnectStatusChanged;
        PluginManagerProxy.OnPluginEnableChanged += PluginManagerProxy_OnPluginEnableChanged;
        PluginManagerProxy.OnPluginProxyAdded += PluginManagerProxy_OnPluginProxyAdded;
        PluginManagerProxy.OnPluginProxyConnectStatusChanged += PluginManagerProxy_OnPluginProxyConnectStatusChanged;

        BlazorUI.Entry_Blazor.OnBlazorServiceStopped -= OnBlazorStopped;
        BlazorUI.Entry_Blazor.OnBlazorServiceStopped += OnBlazorStopped;

        Shared.CurrentBreakPointChanged += CurrentBreakPointChanged;
        CurrentBreakPointChanged(Shared.CurrentBreakPoint);
        LoadPluginList();
    }

    private void OnBlazorStopped()
    {
        Dispose();
    }

    private void CurrentBreakPointChanged(Breakpoint breakpoint)
    {
        ShowActionDrawer = breakpoint switch
        {
            Breakpoint.Lg => false,
            Breakpoint.Xl => false,
            Breakpoint.Md => false,
            _ => true
        };
        ActionDrawerOpen = false;
    }

    private void LoadPluginList()
    {
        SelectedItem = null;
        CQPlugins.Clear();
        foreach (var item in PluginManagerProxy.Proxies.OrderBy(x => x.PluginName))
        {
            CQPlugins.Add(new CQPluginProxyWrapper(item));
        }
    }

    public void Dispose()
    {
        PluginManagerProxy.OnPluginEnableChanged -= PluginManagerProxy_OnPluginEnableChanged;
        PluginManagerProxy.OnPluginProxyAdded -= PluginManagerProxy_OnPluginProxyAdded;
        PluginManagerProxy.OnPluginProxyConnectStatusChanged -= PluginManagerProxy_OnPluginProxyConnectStatusChanged;
        BlazorUI.Entry_Blazor.OnBlazorServiceStopped -= OnBlazorStopped;
        Shared.CurrentBreakPointChanged -= CurrentBreakPointChanged;
    }

    private void SelectedItemChanged(CQPluginProxyWrapper selected)
    {
        if (SelectedItem != null)
        {
            SelectedItem.Selected = false;
        }
        if (selected != null)
        {
            selected.Selected = true;
            SelectedItem = selected;
        }
        ActionDrawerOpen = true;
    }

    private async void PluginManagerProxy_OnPluginEnableChanged(CQPluginProxy plugin)
    {
        var target = CQPlugins.FirstOrDefault(x => x.TargetPlugin == plugin);
        await InvokeAsync(() => StateHasChanged());
    }

    private async void PluginManagerProxy_OnPluginProxyAdded(CQPluginProxy plugin)
    {
        CQPlugins.Add(new CQPluginProxyWrapper(plugin));
        await InvokeAsync(() => StateHasChanged());
    }

    private async void PluginManagerProxy_OnPluginProxyConnectStatusChanged(CQPluginProxy plugin)
    {
        var target = CQPlugins.FirstOrDefault(x => x.TargetPlugin == plugin);
        await InvokeAsync(() => StateHasChanged());
    }

    private string RowClassFunc(CQPluginProxyWrapper item, int row)
    {
        return item.Selected ? "mud-primary-hover" : "";
    }

    private Func<CQPluginProxyWrapper, string> CellClassFunc = (item) =>
    {
        return item.Selected ? "mud-primary-text" : "";
    };

    private async void ReloadAllClick()
    {
        bool? result = await DialogService.ShowMessageBox("重载插件", "确定要重载所有插件吗？这可能会需要一些时间", "嗯", cancelText: "不是", options: new DialogOptions { FullWidth = true });
        if (result == null || !result.Value)
        {
            return;
        }
        ReloadAllRunningStatus = true;
        await Task.Run(() =>
        {
            PluginManagerProxy.Instance.ReloadAllPlugins();
            LoadPluginList();
            ReloadAllRunningStatus = false;
        });
        await InvokeAsync(() => StateHasChanged());
    }
}
