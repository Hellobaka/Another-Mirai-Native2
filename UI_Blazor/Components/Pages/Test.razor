@page "/test"
@using Another_Mirai_Native.Config
@using System.Diagnostics
@using Another_Mirai_Native.Native
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject Shared Shared
@implements IDisposable
@inject IScrollManager ScrollManager
@using Another_Mirai_Native.BlazorUI.Components.Pages.Components

<div style="height: 92vh; display: flex; flex-direction: column; padding: 16px; padding-bottom: 0;">
    <MudGrid>
        <MudItem xs="12">
            <div style="display:flex">
                <MudText>当前测试插件: @(TestingPlugin == null ? "空" : TestingPlugin.PluginName)</MudText>
                @if(ShowActionButton)
                {
                    <MudSpacer />
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.MoreVert" OnClick="@(() => DisplayControlPanel = !DisplayControlPanel)" />
                }
            </div>
        </MudItem>
        <MudItem xs="12" Style="padding-top: 5px;margin-bottom: 10px">
            <MudCollapse Expanded="DisplayControlPanel">
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <div style="display: flex;">
                            <MudSwitch @bind-Value="@Group" T="bool" Color="Color.Primary" Label="使用群组"></MudSwitch>
                            <MudTextField Style="margin-right: 10px;" @bind-Value="GroupId" Label="群" Variant="Variant.Text"></MudTextField>
                        </div>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudTextField @bind-Value="QQId" Label="QQ" Variant="Variant.Text"></MudTextField>
                    </MudItem>
                </MudGrid>
            </MudCollapse>
        </MudItem>
    </MudGrid>
    <ChatMessageDisplay ChatItems="ChatItems" @ref="ChatMessageDisplay" EnableErrorIcon="false"
    OnAt="ChatItem_At"
    OnCopy="ChatItem_Copy"
    OnRepeat="ChatItem_Repeat" />

    <ChatCommandPanel OnMessageSend="SendTestMessage" @ref="MessageCommandPanel"></ChatCommandPanel>
</div>
<MudOverlay DarkBackground="true" AutoClose="false" @bind-Visible="Unavailable">
    <MudText>请在插件管理选择一个测试插件</MudText>
</MudOverlay>

@code
{
    private bool _testGroup;
    public bool Group {
        get => _testGroup;
        set {
            _testGroup = value;
            Shared.TestGroup = value;
        }
    }
    public long GroupId { get; set; }
    public long QQId { get; set; }
    public string SendText { get; set; } = "";
    public List<string> SendHistories { get; set; } = [];
    private List<ChatItemModel> ChatItems { get; set; } = [];
    private int MessageHistoryIndex { get; set; } = 0;
    private CQPluginProxy? TestingPlugin { get; set; }
    private bool Unavailable { get{ return TestingPlugin == null; } set { _ = value; } }
    private ChatMessageDisplay ChatMessageDisplay { get; set; }
    private ChatCommandPanel MessageCommandPanel { get; set; }
    private bool DisplayControlPanel { get; set; } = true;
    private bool ShowActionButton { get; set; } = false;

    protected override void OnInitialized()
    {
        GroupId = CommonConfig.GetConfig("TesterGroup", @"conf/Test.json", (long)100000);
        QQId = CommonConfig.GetConfig("TesterQQ", @"conf/Test.json", (long)100000);
        SendHistories = CommonConfig.GetConfig("MessageHistories", @"conf/Test.json", new List<string>());

        TestingPlugin = PluginManagerProxy.Proxies.FirstOrDefault(x => x.AppInfo.AuthCode == AppConfig.Instance.TestingAuthCode);
        ChatItems = Shared.TestMessages.ToList();
        Group = Shared.TestGroup;
        PluginManagerProxy.OnTestInvoked -= PluginManagerProxy_OnTestInvoked;
        PluginManagerProxy.OnTestInvoked += PluginManagerProxy_OnTestInvoked;
        BlazorUI.Entry_Blazor.OnBlazorServiceStopped -= OnBlazorStopped;
        BlazorUI.Entry_Blazor.OnBlazorServiceStopped += OnBlazorStopped;
        Shared.CurrentBreakPointChanged += CurrentBreakPointChanged;
        CurrentBreakPointChanged(Shared.CurrentBreakPoint);
    }

    private void CurrentBreakPointChanged(Breakpoint breakpoint)
    {
        ShowActionButton = breakpoint switch
        {
            Breakpoint.Lg => false,
            Breakpoint.Xl => false,
            Breakpoint.Md => false,
            _ => true
        };
        DisplayControlPanel = !ShowActionButton;
        InvokeAsync(() => StateHasChanged());
    }

    private void OnBlazorStopped()
    {
        Dispose();
    }

    public void Dispose()
    {
        PluginManagerProxy.OnTestInvoked -= PluginManagerProxy_OnTestInvoked;
        Shared.CurrentBreakPointChanged -= CurrentBreakPointChanged;
    }

    private async void PluginManagerProxy_OnTestInvoked(string functionName, Dictionary<string, object> obj)
    {
        try
        {
            if (TestingPlugin == null)
            {
                return;
            }
            switch (functionName)
            {
                case "CQ_sendPrivateMsg":
                case "CQ_sendGroupMsg":
                case "CQ_sendGroupQuoteMsg":
                    string? msg = obj["msg"]?.ToString();
                    if (string.IsNullOrEmpty(msg))
                    {
                        return;
                    }
                    await AddChatBlock(msg, TestingPlugin.PluginName, AppConfig.Instance.CurrentQQ, DetailItemType.Receive);
                    break;

                default:
                    break;
            }
        }
        catch (Exception)
        {
        }
    }

    private async Task AddChatBlock(string content, string name, long qq, DetailItemType direction)
    {
        var item = new ChatItemModel
        {
            Avatar = new AvatarModel
            {
                AvatarType = AvatarTypes.QQPrivate,
                FallbackName = name,
                Id = qq,
                IsRound = true
            },
            DetailItemType = direction,
            DisplayName = name,
            Id = qq,
            Message = content,
            MsgId = 0,
            Time = DateTime.Now
        };
        ChatItems.Add(item);
        Shared.TestMessages.Add(item);
        await InvokeAsync(() => StateHasChanged());
        await ScrollManager.ScrollToBottomAsync("#chatContainer", ScrollBehavior.Smooth);
    }

    private async Task SendTestMessage(string msg)
    {
        if (string.IsNullOrEmpty(msg) || TestingPlugin == null)
        {
            return;
        }
        await AddChatBlock(msg, "Tester", QQId, DetailItemType.Send);
        CommonConfig.SetConfig("TesterGroup", GroupId, @"conf\Test.json");
        CommonConfig.SetConfig("TesterQQ", QQId, @"conf\Test.json");
        await MessageCommandPanel.ClearSendText();
        if (SendHistories.Contains(msg))
        {
            SendHistories.Remove(msg);
        }
        SendHistories.Add(msg);
        MessageHistoryIndex = 0;
        CommonConfig.SetConfig("MessageHistories", SendHistories, @"conf\Test.json");
        Stopwatch sw = Stopwatch.StartNew();
        bool flag = Group ? SendGroupMessage(msg) : SendPrivateMessage(msg);
        await AddChatBlock($"插件{(flag ? "结束" : "放弃")}了处理({sw.ElapsedMilliseconds}ms)", TestingPlugin.PluginName, AppConfig.Instance.CurrentQQ, DetailItemType.Receive);
        MessageCommandPanel.Sending = false;
    }

    private bool SendGroupMessage(string msg)
    {
        try
        {
            if (TestingPlugin == null)
            {
                Snackbar.Add($"无法调用 GroupMsg 方法，测试插件为 null", Severity.Error);
                return false;
            }
            return PluginManagerProxy.Instance.Event_OnGroupMsg(TestingPlugin, 1, 1, GroupId, QQId, "", msg, 0)
                == 1;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"无法调用 GroupMsg 方法，发生了异常: {ex.Message}", Severity.Error);
            return false;
        }
    }

    private bool SendPrivateMessage(string msg)
    {
        try
        {
            if (TestingPlugin == null)
            {
                Snackbar.Add($"无法调用 PrivateMsg 方法，测试插件为 null", Severity.Error);
                return false;
            }

            return PluginManagerProxy.Instance.Event_OnPrivateMsg(TestingPlugin, 1, 1, QQId, msg, 0)
                == 1;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"无法调用 PrivateMsg 方法，发生了异常: {ex.Message}", Severity.Error);
            return false;
        }
    }

    private async Task ChatItem_At(ChatItemModel item)
    {
        await MessageCommandPanel.AppendText($"[CQ:at,qq={item.Id}]");
    }

    private async Task ChatItem_Copy(ChatItemModel item)
    {
        await JS.InvokeVoidAsync("copyTextToClipboard", item.Message);
        Snackbar.Add("复制成功", Severity.Success);
    }

    private async Task ChatItem_Repeat(ChatItemModel item)
    {
        await SendTestMessage(item.Message);
    }
}